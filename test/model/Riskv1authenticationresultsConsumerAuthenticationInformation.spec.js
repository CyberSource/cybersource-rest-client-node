/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Riskv1authenticationresultsConsumerAuthenticationInformation', function() {
    it('should create an instance of Riskv1authenticationresultsConsumerAuthenticationInformation', function() {
      // uncomment below and update the code to test Riskv1authenticationresultsConsumerAuthenticationInformation
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be.a(CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation);
    });

    it('should have the property acsRenderingType (base name: "acsRenderingType")', function() {
      // uncomment below and update the code to test the property acsRenderingType
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property acsTransactionId (base name: "acsTransactionId")', function() {
      // uncomment below and update the code to test the property acsTransactionId
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property authenticationTransactionId (base name: "authenticationTransactionId")', function() {
      // uncomment below and update the code to test the property authenticationTransactionId
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property authenticationType (base name: "authenticationType")', function() {
      // uncomment below and update the code to test the property authenticationType
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property challengeCancelCode (base name: "challengeCancelCode")', function() {
      // uncomment below and update the code to test the property challengeCancelCode
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property effectiveAuthenticationType (base name: "effectiveAuthenticationType")', function() {
      // uncomment below and update the code to test the property effectiveAuthenticationType
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property directoryServerErrorCode (base name: "directoryServerErrorCode")', function() {
      // uncomment below and update the code to test the property directoryServerErrorCode
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property directoryServerErrorDescription (base name: "directoryServerErrorDescription")', function() {
      // uncomment below and update the code to test the property directoryServerErrorDescription
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property interactionCounter (base name: "interactionCounter")', function() {
      // uncomment below and update the code to test the property interactionCounter
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property signedParesStatusReason (base name: "signedParesStatusReason")', function() {
      // uncomment below and update the code to test the property signedParesStatusReason
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property sdkTransactionId (base name: "sdkTransactionId")', function() {
      // uncomment below and update the code to test the property sdkTransactionId
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property signedPares (base name: "signedPares")', function() {
      // uncomment below and update the code to test the property signedPares
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property threeDSServerTransactionId (base name: "threeDSServerTransactionId")', function() {
      // uncomment below and update the code to test the property threeDSServerTransactionId
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property whiteListStatus (base name: "whiteListStatus")', function() {
      // uncomment below and update the code to test the property whiteListStatus
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

    it('should have the property whiteListStatusSource (base name: "whiteListStatusSource")', function() {
      // uncomment below and update the code to test the property whiteListStatusSource
      //var instane = new CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation();
      //expect(instance).to.be();
    });

  });

}));
