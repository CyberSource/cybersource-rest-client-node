/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation', function() {
    it('should create an instance of UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation', function() {
      // uncomment below and update the code to test UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be.a(CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation);
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "middleName")', function() {
      // uncomment below and update the code to test the property middleName
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property birthDate (base name: "birthDate")', function() {
      // uncomment below and update the code to test the property birthDate
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property isPrimary (base name: "isPrimary")', function() {
      // uncomment below and update the code to test the property isPrimary
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property hasSignificantResponsibility (base name: "hasSignificantResponsibility")', function() {
      // uncomment below and update the code to test the property hasSignificantResponsibility
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property ownerDirector (base name: "ownerDirector")', function() {
      // uncomment below and update the code to test the property ownerDirector
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property nationalId (base name: "nationalId")', function() {
      // uncomment below and update the code to test the property nationalId
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property idCountry (base name: "idCountry")', function() {
      // uncomment below and update the code to test the property idCountry
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property passportNumber (base name: "passportNumber")', function() {
      // uncomment below and update the code to test the property passportNumber
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property passportCountry (base name: "passportCountry")', function() {
      // uncomment below and update the code to test the property passportCountry
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property jobTitle (base name: "jobTitle")', function() {
      // uncomment below and update the code to test the property jobTitle
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property ownershipPercentage (base name: "ownershipPercentage")', function() {
      // uncomment below and update the code to test the property ownershipPercentage
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property nationality (base name: "nationality")', function() {
      // uncomment below and update the code to test the property nationality
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property dueDiligenceRequired (base name: "dueDiligenceRequired")', function() {
      // uncomment below and update the code to test the property dueDiligenceRequired
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumberCountryCode (base name: "phoneNumberCountryCode")', function() {
      // uncomment below and update the code to test the property phoneNumberCountryCode
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "phoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation();
      //expect(instance).to.be();
    });

  });

}));
