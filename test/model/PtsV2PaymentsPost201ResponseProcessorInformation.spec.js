/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PtsV2PaymentsPost201ResponseProcessorInformation', function() {
    it('should create an instance of PtsV2PaymentsPost201ResponseProcessorInformation', function() {
      // uncomment below and update the code to test PtsV2PaymentsPost201ResponseProcessorInformation
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be.a(CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation);
    });

    it('should have the property authIndicator (base name: "authIndicator")', function() {
      // uncomment below and update the code to test the property authIndicator
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property approvalCode (base name: "approvalCode")', function() {
      // uncomment below and update the code to test the property approvalCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property cardReferenceData (base name: "cardReferenceData")', function() {
      // uncomment below and update the code to test the property cardReferenceData
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property transactionId (base name: "transactionId")', function() {
      // uncomment below and update the code to test the property transactionId
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property networkTransactionId (base name: "networkTransactionId")', function() {
      // uncomment below and update the code to test the property networkTransactionId
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property responseCode (base name: "responseCode")', function() {
      // uncomment below and update the code to test the property responseCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property responseCodeSource (base name: "responseCodeSource")', function() {
      // uncomment below and update the code to test the property responseCodeSource
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property responseDetails (base name: "responseDetails")', function() {
      // uncomment below and update the code to test the property responseDetails
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property responseCategoryCode (base name: "responseCategoryCode")', function() {
      // uncomment below and update the code to test the property responseCategoryCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property forwardedAcquirerCode (base name: "forwardedAcquirerCode")', function() {
      // uncomment below and update the code to test the property forwardedAcquirerCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property settlementDate (base name: "settlementDate")', function() {
      // uncomment below and update the code to test the property settlementDate
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property sequenceNumber (base name: "sequenceNumber")', function() {
      // uncomment below and update the code to test the property sequenceNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property avs (base name: "avs")', function() {
      // uncomment below and update the code to test the property avs
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property cardVerification (base name: "cardVerification")', function() {
      // uncomment below and update the code to test the property cardVerification
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property merchantAdvice (base name: "merchantAdvice")', function() {
      // uncomment below and update the code to test the property merchantAdvice
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property electronicVerificationResults (base name: "electronicVerificationResults")', function() {
      // uncomment below and update the code to test the property electronicVerificationResults
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property achVerification (base name: "achVerification")', function() {
      // uncomment below and update the code to test the property achVerification
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property consumerAuthenticationResponse (base name: "consumerAuthenticationResponse")', function() {
      // uncomment below and update the code to test the property consumerAuthenticationResponse
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property systemTraceAuditNumber (base name: "systemTraceAuditNumber")', function() {
      // uncomment below and update the code to test the property systemTraceAuditNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property paymentAccountReferenceNumber (base name: "paymentAccountReferenceNumber")', function() {
      // uncomment below and update the code to test the property paymentAccountReferenceNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property transactionIntegrityCode (base name: "transactionIntegrityCode")', function() {
      // uncomment below and update the code to test the property transactionIntegrityCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property amexVerbalAuthReferenceNumber (base name: "amexVerbalAuthReferenceNumber")', function() {
      // uncomment below and update the code to test the property amexVerbalAuthReferenceNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property masterCardServiceCode (base name: "masterCardServiceCode")', function() {
      // uncomment below and update the code to test the property masterCardServiceCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property masterCardServiceReplyCode (base name: "masterCardServiceReplyCode")', function() {
      // uncomment below and update the code to test the property masterCardServiceReplyCode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property masterCardAuthenticationType (base name: "masterCardAuthenticationType")', function() {
      // uncomment below and update the code to test the property masterCardAuthenticationType
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property routing (base name: "routing")', function() {
      // uncomment below and update the code to test the property routing
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property merchantNumber (base name: "merchantNumber")', function() {
      // uncomment below and update the code to test the property merchantNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property retrievalReferenceNumber (base name: "retrievalReferenceNumber")', function() {
      // uncomment below and update the code to test the property retrievalReferenceNumber
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property paymentUrl (base name: "paymentUrl")', function() {
      // uncomment below and update the code to test the property paymentUrl
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property completeUrl (base name: "completeUrl")', function() {
      // uncomment below and update the code to test the property completeUrl
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property signature (base name: "signature")', function() {
      // uncomment below and update the code to test the property signature
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property publicKey (base name: "publicKey")', function() {
      // uncomment below and update the code to test the property publicKey
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property sellerProtection (base name: "sellerProtection")', function() {
      // uncomment below and update the code to test the property sellerProtection
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property transactionExpiryDate (base name: "transactionExpiryDate")', function() {
      // uncomment below and update the code to test the property transactionExpiryDate
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property customUrl (base name: "customUrl")', function() {
      // uncomment below and update the code to test the property customUrl
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property schemeAssignedId (base name: "schemeAssignedId")', function() {
      // uncomment below and update the code to test the property schemeAssignedId
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property deviceUrl (base name: "deviceUrl")', function() {
      // uncomment below and update the code to test the property deviceUrl
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property disbursementMode (base name: "disbursementMode")', function() {
      // uncomment below and update the code to test the property disbursementMode
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property updateTimeUtc (base name: "updateTimeUtc")', function() {
      // uncomment below and update the code to test the property updateTimeUtc
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property expirationTimeUtc (base name: "expirationTimeUtc")', function() {
      // uncomment below and update the code to test the property expirationTimeUtc
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property orderId (base name: "orderId")', function() {
      // uncomment below and update the code to test the property orderId
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property orderStatus (base name: "orderStatus")', function() {
      // uncomment below and update the code to test the property orderStatus
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

    it('should have the property merchantRiskPrediction (base name: "merchantRiskPrediction")', function() {
      // uncomment below and update the code to test the property merchantRiskPrediction
      //var instane = new CyberSource.PtsV2PaymentsPost201ResponseProcessorInformation();
      //expect(instance).to.be();
    });

  });

}));
