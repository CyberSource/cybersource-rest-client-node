/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.InlineResponse2011SetupsPayments();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse2011SetupsPayments', function() {
    it('should create an instance of InlineResponse2011SetupsPayments', function() {
      // uncomment below and update the code to test InlineResponse2011SetupsPayments
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be.a(CyberSource.InlineResponse2011SetupsPayments);
    });

    it('should have the property cardProcessing (base name: "cardProcessing")', function() {
      // uncomment below and update the code to test the property cardProcessing
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property cardPresentConnect (base name: "cardPresentConnect")', function() {
      // uncomment below and update the code to test the property cardPresentConnect
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property eCheck (base name: "eCheck")', function() {
      // uncomment below and update the code to test the property eCheck
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property payerAuthentication (base name: "payerAuthentication")', function() {
      // uncomment below and update the code to test the property payerAuthentication
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property digitalPayments (base name: "digitalPayments")', function() {
      // uncomment below and update the code to test the property digitalPayments
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property secureAcceptance (base name: "secureAcceptance")', function() {
      // uncomment below and update the code to test the property secureAcceptance
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property virtualTerminal (base name: "virtualTerminal")', function() {
      // uncomment below and update the code to test the property virtualTerminal
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property currencyConversion (base name: "currencyConversion")', function() {
      // uncomment below and update the code to test the property currencyConversion
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property customerInvoicing (base name: "customerInvoicing")', function() {
      // uncomment below and update the code to test the property customerInvoicing
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property recurringBilling (base name: "recurringBilling")', function() {
      // uncomment below and update the code to test the property recurringBilling
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property cybsReadyTerminal (base name: "cybsReadyTerminal")', function() {
      // uncomment below and update the code to test the property cybsReadyTerminal
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property paymentOrchestration (base name: "paymentOrchestration")', function() {
      // uncomment below and update the code to test the property paymentOrchestration
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property payouts (base name: "payouts")', function() {
      // uncomment below and update the code to test the property payouts
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property payByLink (base name: "payByLink")', function() {
      // uncomment below and update the code to test the property payByLink
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property unifiedCheckout (base name: "unifiedCheckout")', function() {
      // uncomment below and update the code to test the property unifiedCheckout
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

    it('should have the property receivablesManager (base name: "receivablesManager")', function() {
      // uncomment below and update the code to test the property receivablesManager
      //var instane = new CyberSource.InlineResponse2011SetupsPayments();
      //expect(instance).to.be();
    });

  });

}));
