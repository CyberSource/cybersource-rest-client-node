/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.Ptsv2intentsProcessingInformation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ptsv2intentsProcessingInformation', function() {
    it('should create an instance of Ptsv2intentsProcessingInformation', function() {
      // uncomment below and update the code to test Ptsv2intentsProcessingInformation
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be.a(CyberSource.Ptsv2intentsProcessingInformation);
    });

    it('should have the property processingInstruction (base name: "processingInstruction")', function() {
      // uncomment below and update the code to test the property processingInstruction
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property authorizationOptions (base name: "authorizationOptions")', function() {
      // uncomment below and update the code to test the property authorizationOptions
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property actionList (base name: "actionList")', function() {
      // uncomment below and update the code to test the property actionList
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property highRiskTransactionFlag (base name: "highRiskTransactionFlag")', function() {
      // uncomment below and update the code to test the property highRiskTransactionFlag
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property transactionRetry (base name: "transactionRetry")', function() {
      // uncomment below and update the code to test the property transactionRetry
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property lastOneHrTransactionCount (base name: "lastOneHrTransactionCount")', function() {
      // uncomment below and update the code to test the property lastOneHrTransactionCount
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property lastOneDayTransactionCount (base name: "lastOneDayTransactionCount")', function() {
      // uncomment below and update the code to test the property lastOneDayTransactionCount
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property lastThreeMonthsTxnCount (base name: "lastThreeMonthsTxnCount")', function() {
      // uncomment below and update the code to test the property lastThreeMonthsTxnCount
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property totalTransactionCount (base name: "totalTransactionCount")', function() {
      // uncomment below and update the code to test the property totalTransactionCount
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property pinVerification (base name: "pinVerification")', function() {
      // uncomment below and update the code to test the property pinVerification
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property faceIdVerification (base name: "faceIdVerification")', function() {
      // uncomment below and update the code to test the property faceIdVerification
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property userPassedVerification (base name: "userPassedVerification")', function() {
      // uncomment below and update the code to test the property userPassedVerification
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property transactionDate (base name: "transactionDate")', function() {
      // uncomment below and update the code to test the property transactionDate
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

    it('should have the property tangible (base name: "tangible")', function() {
      // uncomment below and update the code to test the property tangible
      //var instane = new CyberSource.Ptsv2intentsProcessingInformation();
      //expect(instance).to.be();
    });

  });

}));
