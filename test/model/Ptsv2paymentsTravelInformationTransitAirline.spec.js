/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ptsv2paymentsTravelInformationTransitAirline', function() {
    it('should create an instance of Ptsv2paymentsTravelInformationTransitAirline', function() {
      // uncomment below and update the code to test Ptsv2paymentsTravelInformationTransitAirline
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be.a(CyberSource.Ptsv2paymentsTravelInformationTransitAirline);
    });

    it('should have the property bookingReferenceNumber (base name: "bookingReferenceNumber")', function() {
      // uncomment below and update the code to test the property bookingReferenceNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property carrierName (base name: "carrierName")', function() {
      // uncomment below and update the code to test the property carrierName
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property ticketIssuer (base name: "ticketIssuer")', function() {
      // uncomment below and update the code to test the property ticketIssuer
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property ticketNumber (base name: "ticketNumber")', function() {
      // uncomment below and update the code to test the property ticketNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property checkDigit (base name: "checkDigit")', function() {
      // uncomment below and update the code to test the property checkDigit
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property restrictedTicketIndicator (base name: "restrictedTicketIndicator")', function() {
      // uncomment below and update the code to test the property restrictedTicketIndicator
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property transactionType (base name: "transactionType")', function() {
      // uncomment below and update the code to test the property transactionType
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property extendedPaymentCode (base name: "extendedPaymentCode")', function() {
      // uncomment below and update the code to test the property extendedPaymentCode
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property passengerName (base name: "passengerName")', function() {
      // uncomment below and update the code to test the property passengerName
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property customerCode (base name: "customerCode")', function() {
      // uncomment below and update the code to test the property customerCode
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property documentType (base name: "documentType")', function() {
      // uncomment below and update the code to test the property documentType
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property documentNumber (base name: "documentNumber")', function() {
      // uncomment below and update the code to test the property documentNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property documentNumberOfParts (base name: "documentNumberOfParts")', function() {
      // uncomment below and update the code to test the property documentNumberOfParts
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property invoiceNumber (base name: "invoiceNumber")', function() {
      // uncomment below and update the code to test the property invoiceNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property invoiceDate (base name: "invoiceDate")', function() {
      // uncomment below and update the code to test the property invoiceDate
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property additionalCharges (base name: "additionalCharges")', function() {
      // uncomment below and update the code to test the property additionalCharges
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property totalFeeAmount (base name: "totalFeeAmount")', function() {
      // uncomment below and update the code to test the property totalFeeAmount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property clearingSequence (base name: "clearingSequence")', function() {
      // uncomment below and update the code to test the property clearingSequence
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property clearingCount (base name: "clearingCount")', function() {
      // uncomment below and update the code to test the property clearingCount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property totalClearingAmount (base name: "totalClearingAmount")', function() {
      // uncomment below and update the code to test the property totalClearingAmount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property numberOfPassengers (base name: "numberOfPassengers")', function() {
      // uncomment below and update the code to test the property numberOfPassengers
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property reservationSystemCode (base name: "reservationSystemCode")', function() {
      // uncomment below and update the code to test the property reservationSystemCode
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property processIdentifier (base name: "processIdentifier")', function() {
      // uncomment below and update the code to test the property processIdentifier
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property ticketIssueDate (base name: "ticketIssueDate")', function() {
      // uncomment below and update the code to test the property ticketIssueDate
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property electronicTicketIndicator (base name: "electronicTicketIndicator")', function() {
      // uncomment below and update the code to test the property electronicTicketIndicator
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property originalTicketNumber (base name: "originalTicketNumber")', function() {
      // uncomment below and update the code to test the property originalTicketNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property purchaseType (base name: "purchaseType")', function() {
      // uncomment below and update the code to test the property purchaseType
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property creditReasonIndicator (base name: "creditReasonIndicator")', function() {
      // uncomment below and update the code to test the property creditReasonIndicator
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property ticketChangeIndicator (base name: "ticketChangeIndicator")', function() {
      // uncomment below and update the code to test the property ticketChangeIndicator
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property planNumber (base name: "planNumber")', function() {
      // uncomment below and update the code to test the property planNumber
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property arrivalDate (base name: "arrivalDate")', function() {
      // uncomment below and update the code to test the property arrivalDate
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property restrictedTicketDesciption (base name: "restrictedTicketDesciption")', function() {
      // uncomment below and update the code to test the property restrictedTicketDesciption
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property exchangeTicketAmount (base name: "exchangeTicketAmount")', function() {
      // uncomment below and update the code to test the property exchangeTicketAmount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property exchangeTicketFeeAmount (base name: "exchangeTicketFeeAmount")', function() {
      // uncomment below and update the code to test the property exchangeTicketFeeAmount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property reservationType (base name: "reservationType")', function() {
      // uncomment below and update the code to test the property reservationType
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property boardingFeeAmount (base name: "boardingFeeAmount")', function() {
      // uncomment below and update the code to test the property boardingFeeAmount
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property legs (base name: "legs")', function() {
      // uncomment below and update the code to test the property legs
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

    it('should have the property ancillaryInformation (base name: "ancillaryInformation")', function() {
      // uncomment below and update the code to test the property ancillaryInformation
      //var instane = new CyberSource.Ptsv2paymentsTravelInformationTransitAirline();
      //expect(instance).to.be();
    });

  });

}));
