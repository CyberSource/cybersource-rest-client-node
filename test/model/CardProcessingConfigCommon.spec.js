/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyberSource);
  }
}(this, function(expect, CyberSource) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyberSource.CardProcessingConfigCommon();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CardProcessingConfigCommon', function() {
    it('should create an instance of CardProcessingConfigCommon', function() {
      // uncomment below and update the code to test CardProcessingConfigCommon
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be.a(CyberSource.CardProcessingConfigCommon);
    });

    it('should have the property processors (base name: "processors")', function() {
      // uncomment below and update the code to test the property processors
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property amexVendorCode (base name: "amexVendorCode")', function() {
      // uncomment below and update the code to test the property amexVendorCode
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property defaultAuthTypeCode (base name: "defaultAuthTypeCode")', function() {
      // uncomment below and update the code to test the property defaultAuthTypeCode
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property masterCardAssignedId (base name: "masterCardAssignedId")', function() {
      // uncomment below and update the code to test the property masterCardAssignedId
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property enablePartialAuth (base name: "enablePartialAuth")', function() {
      // uncomment below and update the code to test the property enablePartialAuth
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property merchantCategoryCode (base name: "merchantCategoryCode")', function() {
      // uncomment below and update the code to test the property merchantCategoryCode
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property sicCode (base name: "sicCode")', function() {
      // uncomment below and update the code to test the property sicCode
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property foodAndConsumerServiceId (base name: "foodAndConsumerServiceId")', function() {
      // uncomment below and update the code to test the property foodAndConsumerServiceId
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property enableSplitShipment (base name: "enableSplitShipment")', function() {
      // uncomment below and update the code to test the property enableSplitShipment
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property enableInterchangeOptimization (base name: "enableInterchangeOptimization")', function() {
      // uncomment below and update the code to test the property enableInterchangeOptimization
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property visaDelegatedAuthenticationId (base name: "visaDelegatedAuthenticationId")', function() {
      // uncomment below and update the code to test the property visaDelegatedAuthenticationId
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property creditCardRefundLimitPercent (base name: "creditCardRefundLimitPercent")', function() {
      // uncomment below and update the code to test the property creditCardRefundLimitPercent
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property businessCenterCreditCardRefundLimitPercent (base name: "businessCenterCreditCardRefundLimitPercent")', function() {
      // uncomment below and update the code to test the property businessCenterCreditCardRefundLimitPercent
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property allowCapturesGreaterThanAuthorizations (base name: "allowCapturesGreaterThanAuthorizations")', function() {
      // uncomment below and update the code to test the property allowCapturesGreaterThanAuthorizations
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property enableDuplicateMerchantReferenceNumberBlocking (base name: "enableDuplicateMerchantReferenceNumberBlocking")', function() {
      // uncomment below and update the code to test the property enableDuplicateMerchantReferenceNumberBlocking
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property domesticMerchantId (base name: "domesticMerchantId")', function() {
      // uncomment below and update the code to test the property domesticMerchantId
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property processLevel3Data (base name: "processLevel3Data")', function() {
      // uncomment below and update the code to test the property processLevel3Data
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property subMerchantId (base name: "subMerchantId")', function() {
      // uncomment below and update the code to test the property subMerchantId
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property subMerchantBusinessName (base name: "subMerchantBusinessName")', function() {
      // uncomment below and update the code to test the property subMerchantBusinessName
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property preferCobadgedSecondaryBrand (base name: "preferCobadgedSecondaryBrand")', function() {
      // uncomment below and update the code to test the property preferCobadgedSecondaryBrand
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

    it('should have the property merchantDescriptorInformation (base name: "merchantDescriptorInformation")', function() {
      // uncomment below and update the code to test the property merchantDescriptorInformation
      //var instane = new CyberSource.CardProcessingConfigCommon();
      //expect(instance).to.be();
    });

  });

}));
