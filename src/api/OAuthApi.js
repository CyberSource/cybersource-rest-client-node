/**
 * OAuth2 API
 * OAuth2 Token Service (OAuth2)
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessTokenResponse', 'model/BadRequestError', 'model/CreateAccessTokenRequest', 'model/ResourceNotFoundError', 'model/UnauthorizedClientError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessTokenResponse'), require('../model/BadRequestError'), require('../model/CreateAccessTokenRequest'), require('../model/ResourceNotFoundError'), require('../model/UnauthorizedClientError'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.OAuthApi = factory(root.CyberSource.ApiClient, root.CyberSource.AccessTokenResponse, root.CyberSource.BadRequestError, root.CyberSource.CreateAccessTokenRequest, root.CyberSource.ResourceNotFoundError, root.CyberSource.UnauthorizedClientError);
  }
}(this, function(ApiClient, AccessTokenResponse, BadRequestError, CreateAccessTokenRequest, ResourceNotFoundError, UnauthorizedClientError) {
  'use strict';

  /**
   * OAuth service.
   * @module api/OAuthApi
   * @version v3
   */

  /**
   * Constructs a new OAuthApi. 
   * @alias module:api/OAuthApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(configObject, apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

	this.apiClient.setConfiguration(configObject);
	

    /**
     * Callback function to receive the result of the createAccessToken operation.
     * @callback module:api/OAuthApi~createAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create access token and refresh token
     * This request is used by technology partners to obtain an access token and a refresh token, which are contained in the response.  The partner can then use the access token for authentication when submitting API requests to CyberSource on behalf of the merchant.   The request must include the authorization code that was included in the URL redirect response from CyberSource (see [full documentation](https://developer.cybersource.com/api/developer-guides/OAuth/cybs_extend_intro.html)). Access tokens expire after 15 minutes. The refresh token is used to create a new access token, it expires after one year. 
     * @param {module:model/CreateAccessTokenRequest} createAccessTokenRequest Request payload
     * @param {Object} opts Optional parameters
     * @param {String} opts.vCClientCorrelationId We recommended that you submit this header with a unique value in every client request to this endpoint.  It is sent back in the response header and logged both in the request log and response log. 
     * @param {module:api/OAuthApi~createAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenResponse}
     */
    this.createAccessToken = function(createAccessTokenRequest, opts, callback) {
      opts = opts || {};
      var postBody = createAccessTokenRequest;

      // verify the required parameter 'createAccessTokenRequest' is set
      if (createAccessTokenRequest === undefined || createAccessTokenRequest === null) {
        throw new Error("Missing the required parameter 'createAccessTokenRequest' when calling createAccessToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'v-c-client-correlation-id': opts['vCClientCorrelationId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = AccessTokenResponse;

      return this.apiClient.callApi(
        '/oauth2/v3/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
