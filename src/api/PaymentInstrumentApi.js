/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreatePaymentInstrumentRequest', 'model/InlineResponse4001', 'model/TmsV1PaymentinstrumentsPatch200Response', 'model/UpdatePaymentInstrumentRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreatePaymentInstrumentRequest'), require('../model/InlineResponse4001'), require('../model/TmsV1PaymentinstrumentsPatch200Response'), require('../model/UpdatePaymentInstrumentRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentInstrumentApi = factory(root.CyberSource.ApiClient, root.CyberSource.CreatePaymentInstrumentRequest, root.CyberSource.InlineResponse4001, root.CyberSource.TmsV1PaymentinstrumentsPatch200Response, root.CyberSource.UpdatePaymentInstrumentRequest);
  }
}(this, function(ApiClient, CreatePaymentInstrumentRequest, InlineResponse4001, TmsV1PaymentinstrumentsPatch200Response, UpdatePaymentInstrumentRequest) {
  'use strict';

  /**
   * PaymentInstrument service.
   * @module api/PaymentInstrumentApi
   * @version 0.0.1
   */

  /**
   * Constructs a new PaymentInstrumentApi. 
   * @alias module:api/PaymentInstrumentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(configObject, apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

	this.apiClient.setConfiguration(configObject);
	

    /**
     * Callback function to receive the result of the createPaymentInstrument operation.
     * @callback module:api/PaymentInstrumentApi~createPaymentInstrumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV1PaymentinstrumentsPatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} vCMerchantId CyberSource merchant id.
     * @param {String} vCCorrelationId The mandatory correlation id passed by upstream (calling) system.
     * @param {module:model/CreatePaymentInstrumentRequest} createPaymentInstrumentRequest Specify the customer&#39;s payment details for card or bank account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientApplication Client application name
     * @param {module:api/PaymentInstrumentApi~createPaymentInstrumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV1PaymentinstrumentsPatch200Response}
     */
    this.createPaymentInstrument = function(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, opts, callback) {
      opts = opts || {};
      var postBody = createPaymentInstrumentRequest;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling createPaymentInstrument");
      }

      // verify the required parameter 'vCMerchantId' is set
      if (vCMerchantId === undefined || vCMerchantId === null) {
        throw new Error("Missing the required parameter 'vCMerchantId' when calling createPaymentInstrument");
      }

      // verify the required parameter 'vCCorrelationId' is set
      if (vCCorrelationId === undefined || vCCorrelationId === null) {
        throw new Error("Missing the required parameter 'vCCorrelationId' when calling createPaymentInstrument");
      }

      // verify the required parameter 'createPaymentInstrumentRequest' is set
      if (createPaymentInstrumentRequest === undefined || createPaymentInstrumentRequest === null) {
        throw new Error("Missing the required parameter 'createPaymentInstrumentRequest' when calling createPaymentInstrument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId,
        'v-c-merchant-id': vCMerchantId,
        'v-c-correlation-id': vCCorrelationId,
        'Client-Application': opts['clientApplication']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['*/*'];
      var returnType = TmsV1PaymentinstrumentsPatch200Response;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentInstrument operation.
     * @callback module:api/PaymentInstrumentApi~deletePaymentInstrumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} vCMerchantId CyberSource merchant id.
     * @param {String} vCCorrelationId The mandatory correlation id passed by upstream (calling) system.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientApplication Client application name
     * @param {module:api/PaymentInstrumentApi~deletePaymentInstrumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePaymentInstrument = function(profileId, vCMerchantId, vCCorrelationId, tokenId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling deletePaymentInstrument");
      }

      // verify the required parameter 'vCMerchantId' is set
      if (vCMerchantId === undefined || vCMerchantId === null) {
        throw new Error("Missing the required parameter 'vCMerchantId' when calling deletePaymentInstrument");
      }

      // verify the required parameter 'vCCorrelationId' is set
      if (vCCorrelationId === undefined || vCCorrelationId === null) {
        throw new Error("Missing the required parameter 'vCCorrelationId' when calling deletePaymentInstrument");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deletePaymentInstrument");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId,
        'v-c-merchant-id': vCMerchantId,
        'v-c-correlation-id': vCCorrelationId,
        'Client-Application': opts['clientApplication']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentInstrument operation.
     * @callback module:api/PaymentInstrumentApi~getPaymentInstrumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV1PaymentinstrumentsPatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} vCMerchantId CyberSource merchant id.
     * @param {String} vCCorrelationId The mandatory correlation id passed by upstream (calling) system.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientApplication Client application name
     * @param {module:api/PaymentInstrumentApi~getPaymentInstrumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV1PaymentinstrumentsPatch200Response}
     */
    this.getPaymentInstrument = function(profileId, vCMerchantId, vCCorrelationId, tokenId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getPaymentInstrument");
      }

      // verify the required parameter 'vCMerchantId' is set
      if (vCMerchantId === undefined || vCMerchantId === null) {
        throw new Error("Missing the required parameter 'vCMerchantId' when calling getPaymentInstrument");
      }

      // verify the required parameter 'vCCorrelationId' is set
      if (vCCorrelationId === undefined || vCCorrelationId === null) {
        throw new Error("Missing the required parameter 'vCCorrelationId' when calling getPaymentInstrument");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getPaymentInstrument");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId,
        'v-c-merchant-id': vCMerchantId,
        'v-c-correlation-id': vCCorrelationId,
        'Client-Application': opts['clientApplication']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['*/*'];
      var returnType = TmsV1PaymentinstrumentsPatch200Response;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentInstrument operation.
     * @callback module:api/PaymentInstrumentApi~updatePaymentInstrumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV1PaymentinstrumentsPatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} vCMerchantId CyberSource merchant id.
     * @param {String} vCCorrelationId The mandatory correlation id passed by upstream (calling) system.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {module:model/UpdatePaymentInstrumentRequest} updatePaymentInstrumentRequest Specify the customer&#39;s payment details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientApplication Client application name
     * @param {module:api/PaymentInstrumentApi~updatePaymentInstrumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV1PaymentinstrumentsPatch200Response}
     */
    this.updatePaymentInstrument = function(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, opts, callback) {
      opts = opts || {};
      var postBody = updatePaymentInstrumentRequest;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updatePaymentInstrument");
      }

      // verify the required parameter 'vCMerchantId' is set
      if (vCMerchantId === undefined || vCMerchantId === null) {
        throw new Error("Missing the required parameter 'vCMerchantId' when calling updatePaymentInstrument");
      }

      // verify the required parameter 'vCCorrelationId' is set
      if (vCCorrelationId === undefined || vCCorrelationId === null) {
        throw new Error("Missing the required parameter 'vCCorrelationId' when calling updatePaymentInstrument");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling updatePaymentInstrument");
      }

      // verify the required parameter 'updatePaymentInstrumentRequest' is set
      if (updatePaymentInstrumentRequest === undefined || updatePaymentInstrumentRequest === null) {
        throw new Error("Missing the required parameter 'updatePaymentInstrumentRequest' when calling updatePaymentInstrument");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId,
        'v-c-merchant-id': vCMerchantId,
        'v-c-correlation-id': vCCorrelationId,
        'Client-Application': opts['clientApplication']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['*/*'];
      var returnType = TmsV1PaymentinstrumentsPatch200Response;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
