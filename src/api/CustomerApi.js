/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse400', 'model/PatchCustomerRequest', 'model/PostCustomerRequest', 'model/TmsV2CustomersResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse400'), require('../model/PatchCustomerRequest'), require('../model/PostCustomerRequest'), require('../model/TmsV2CustomersResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.CustomerApi = factory(root.CyberSource.ApiClient, root.CyberSource.InlineResponse400, root.CyberSource.PatchCustomerRequest, root.CyberSource.PostCustomerRequest, root.CyberSource.TmsV2CustomersResponse);
  }
}(this, function(ApiClient, InlineResponse400, PatchCustomerRequest, PostCustomerRequest, TmsV2CustomersResponse) {
  'use strict';

  /**
   * Customer service.
   * @module api/CustomerApi
   * @version 0.0.1
   */

  /**
   * Constructs a new CustomerApi. 
   * @alias module:api/CustomerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(configObject, apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

	this.apiClient.setConfiguration(configObject);
	

    /**
     * Callback function to receive the result of the deleteCustomer operation.
     * @callback module:api/CustomerApi~deleteCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Customer
     * @param {String} customerTokenId The TokenId of a customer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileId The id of a profile containing user specific TMS configuration.
     * @param {module:api/CustomerApi~deleteCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomer = function(customerTokenId, opts, callback) {
      opts = opts || {};
      var postBody = null;
      if ('DELETE' == 'POST') {
        postBody = '{}';
      }

      // verify the required parameter 'customerTokenId' is set
      if (customerTokenId === undefined || customerTokenId === null) {
        throw new Error("Missing the required parameter 'customerTokenId' when calling deleteCustomer");
      }


      var pathParams = {
        'customerTokenId': customerTokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': opts['profileId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tms/v2/customers/{customerTokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomer operation.
     * @callback module:api/CustomerApi~getCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV2CustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Customer
     * @param {String} customerTokenId The TokenId of a customer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileId The id of a profile containing user specific TMS configuration.
     * @param {module:api/CustomerApi~getCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV2CustomersResponse}
     */
    this.getCustomer = function(customerTokenId, opts, callback) {
      opts = opts || {};
      var postBody = null;
      if ('GET' == 'POST') {
        postBody = '{}';
      }

      // verify the required parameter 'customerTokenId' is set
      if (customerTokenId === undefined || customerTokenId === null) {
        throw new Error("Missing the required parameter 'customerTokenId' when calling getCustomer");
      }


      var pathParams = {
        'customerTokenId': customerTokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': opts['profileId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = TmsV2CustomersResponse;

      return this.apiClient.callApi(
        '/tms/v2/customers/{customerTokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomer operation.
     * @callback module:api/CustomerApi~patchCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV2CustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Customer
     * @param {String} customerTokenId The TokenId of a customer.
     * @param {module:model/PatchCustomerRequest} patchCustomerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileId The id of a profile containing user specific TMS configuration.
     * @param {String} opts.ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {module:api/CustomerApi~patchCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV2CustomersResponse}
     */
    this.patchCustomer = function(customerTokenId, patchCustomerRequest, opts, callback) {
      opts = opts || {};
      var postBody = patchCustomerRequest;

      // verify the required parameter 'customerTokenId' is set
      if (customerTokenId === undefined || customerTokenId === null) {
        throw new Error("Missing the required parameter 'customerTokenId' when calling patchCustomer");
      }

      // verify the required parameter 'patchCustomerRequest' is set
      if (patchCustomerRequest === undefined || patchCustomerRequest === null) {
        throw new Error("Missing the required parameter 'patchCustomerRequest' when calling patchCustomer");
      }


      var pathParams = {
        'customerTokenId': customerTokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': opts['profileId'],
        'if-match': opts['ifMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = TmsV2CustomersResponse;

      return this.apiClient.callApi(
        '/tms/v2/customers/{customerTokenId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomer operation.
     * @callback module:api/CustomerApi~postCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV2CustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Customer
     * @param {module:model/PostCustomerRequest} postCustomerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileId The id of a profile containing user specific TMS configuration.
     * @param {module:api/CustomerApi~postCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV2CustomersResponse}
     */
    this.postCustomer = function(postCustomerRequest, opts, callback) {
      opts = opts || {};
      var postBody = postCustomerRequest;

      // verify the required parameter 'postCustomerRequest' is set
      if (postCustomerRequest === undefined || postCustomerRequest === null) {
        throw new Error("Missing the required parameter 'postCustomerRequest' when calling postCustomer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': opts['profileId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = TmsV2CustomersResponse;

      return this.apiClient.callApi(
        '/tms/v2/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
