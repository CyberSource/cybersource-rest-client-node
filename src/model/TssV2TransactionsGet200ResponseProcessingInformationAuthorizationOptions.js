/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions = factory(root.CyberSource.ApiClient, root.CyberSource.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator);
  }
}(this, function(ApiClient, TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator) {
  'use strict';




  /**
   * The TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions model module.
   * @module model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions</code>.
   * @alias module:model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions} obj Optional instance to populate.
   * @return {module:model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions} The populated <code>TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('authType')) {
        obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
      }
      if (data.hasOwnProperty('authIndicator')) {
        obj['authIndicator'] = ApiClient.convertToType(data['authIndicator'], 'String');
      }
      if (data.hasOwnProperty('extendAuthIndicator')) {
        obj['extendAuthIndicator'] = ApiClient.convertToType(data['extendAuthIndicator'], 'String');
      }
      if (data.hasOwnProperty('cardVerificationIndicator')) {
        obj['cardVerificationIndicator'] = ApiClient.convertToType(data['cardVerificationIndicator'], 'Boolean');
      }
      if (data.hasOwnProperty('initiator')) {
        obj['initiator'] = TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator.constructFromObject(data['initiator']);
      }
    }
    return obj;
  }

  /**
   * Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture.  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. 
   * @member {String} authType
   */
  exports.prototype['authType'] = undefined;
  /**
   * Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. 
   * @member {String} authIndicator
   */
  exports.prototype['authIndicator'] = undefined;
  /**
   * Flag that indicates whether the transaction is an extended authorization. 
   * @member {String} extendAuthIndicator
   */
  exports.prototype['extendAuthIndicator'] = undefined;
  /**
   * This API field will indicate whether a card verification check is being performed during the transaction  Possible values:   - `true`   - `false` (default value) 
   * @member {Boolean} cardVerificationIndicator
   */
  exports.prototype['cardVerificationIndicator'] = undefined;
  /**
   * @member {module:model/TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator} initiator
   */
  exports.prototype['initiator'] = undefined;



  return exports;
}));


