/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Riskv1authenticationresultsConsumerAuthenticationInformation = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Riskv1authenticationresultsConsumerAuthenticationInformation model module.
   * @module model/Riskv1authenticationresultsConsumerAuthenticationInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Riskv1authenticationresultsConsumerAuthenticationInformation</code>.
   * @alias module:model/Riskv1authenticationresultsConsumerAuthenticationInformation
   * @class
   * @param signedPares {String} Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
   */
  var exports = function(signedPares) {
    var _this = this;












    _this['signedPares'] = signedPares;



  };

  /**
   * Constructs a <code>Riskv1authenticationresultsConsumerAuthenticationInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Riskv1authenticationresultsConsumerAuthenticationInformation} obj Optional instance to populate.
   * @return {module:model/Riskv1authenticationresultsConsumerAuthenticationInformation} The populated <code>Riskv1authenticationresultsConsumerAuthenticationInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('acsRenderingType')) {
        obj['acsRenderingType'] = ApiClient.convertToType(data['acsRenderingType'], 'String');
      }
      if (data.hasOwnProperty('acsTransactionId')) {
        obj['acsTransactionId'] = ApiClient.convertToType(data['acsTransactionId'], 'String');
      }
      if (data.hasOwnProperty('authenticationTransactionId')) {
        obj['authenticationTransactionId'] = ApiClient.convertToType(data['authenticationTransactionId'], 'String');
      }
      if (data.hasOwnProperty('authenticationType')) {
        obj['authenticationType'] = ApiClient.convertToType(data['authenticationType'], 'String');
      }
      if (data.hasOwnProperty('challengeCancelCode')) {
        obj['challengeCancelCode'] = ApiClient.convertToType(data['challengeCancelCode'], 'String');
      }
      if (data.hasOwnProperty('effectiveAuthenticationType')) {
        obj['effectiveAuthenticationType'] = ApiClient.convertToType(data['effectiveAuthenticationType'], 'String');
      }
      if (data.hasOwnProperty('directoryServerErrorCode')) {
        obj['directoryServerErrorCode'] = ApiClient.convertToType(data['directoryServerErrorCode'], 'String');
      }
      if (data.hasOwnProperty('directoryServerErrorDescription')) {
        obj['directoryServerErrorDescription'] = ApiClient.convertToType(data['directoryServerErrorDescription'], 'String');
      }
      if (data.hasOwnProperty('interactionCounter')) {
        obj['interactionCounter'] = ApiClient.convertToType(data['interactionCounter'], 'String');
      }
      if (data.hasOwnProperty('signedParesStatusReason')) {
        obj['signedParesStatusReason'] = ApiClient.convertToType(data['signedParesStatusReason'], 'String');
      }
      if (data.hasOwnProperty('sdkTransactionId')) {
        obj['sdkTransactionId'] = ApiClient.convertToType(data['sdkTransactionId'], 'String');
      }
      if (data.hasOwnProperty('signedPares')) {
        obj['signedPares'] = ApiClient.convertToType(data['signedPares'], 'String');
      }
      if (data.hasOwnProperty('threeDSServerTransactionId')) {
        obj['threeDSServerTransactionId'] = ApiClient.convertToType(data['threeDSServerTransactionId'], 'String');
      }
      if (data.hasOwnProperty('whiteListStatus')) {
        obj['whiteListStatus'] = ApiClient.convertToType(data['whiteListStatus'], 'String');
      }
      if (data.hasOwnProperty('whiteListStatusSource')) {
        obj['whiteListStatusSource'] = ApiClient.convertToType(data['whiteListStatusSource'], 'String');
      }
    }
    return obj;
  }

  /**
   * Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. 
   * @member {String} acsRenderingType
   */
  exports.prototype['acsRenderingType'] = undefined;
  /**
   * Unique transaction identifier assigned by the ACS to identify a single transaction. 
   * @member {String} acsTransactionId
   */
  exports.prototype['acsTransactionId'] = undefined;
  /**
   * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
   * @member {String} authenticationTransactionId
   */
  exports.prototype['authenticationTransactionId'] = undefined;
  /**
   * Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
   * @member {String} authenticationType
   */
  exports.prototype['authenticationType'] = undefined;
  /**
   * An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK 
   * @member {String} challengeCancelCode
   */
  exports.prototype['challengeCancelCode'] = undefined;
  /**
   * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
   * @member {String} effectiveAuthenticationType
   */
  exports.prototype['effectiveAuthenticationType'] = undefined;
  /**
   * The directory server error code indicating a problem with this transaction. 
   * @member {String} directoryServerErrorCode
   */
  exports.prototype['directoryServerErrorCode'] = undefined;
  /**
   * Directory server text and additional detail about the error for this transaction. 
   * @member {String} directoryServerErrorDescription
   */
  exports.prototype['directoryServerErrorDescription'] = undefined;
  /**
   * Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button. 
   * @member {String} interactionCounter
   */
  exports.prototype['interactionCounter'] = undefined;
  /**
   * Provides additional information as to why the PAResStatus has a specific value. 
   * @member {String} signedParesStatusReason
   */
  exports.prototype['signedParesStatusReason'] = undefined;
  /**
   * SDK unique transaction identifier that is generated on each new transaction. 
   * @member {String} sdkTransactionId
   */
  exports.prototype['sdkTransactionId'] = undefined;
  /**
   * Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
   * @member {String} signedPares
   */
  exports.prototype['signedPares'] = undefined;
  /**
   * Unique transaction identifier assigned by the 3DS Server to identify a single transaction. 
   * @member {String} threeDSServerTransactionId
   */
  exports.prototype['threeDSServerTransactionId'] = undefined;
  /**
   * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
   * @member {String} whiteListStatus
   */
  exports.prototype['whiteListStatus'] = undefined;
  /**
   * This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS 
   * @member {String} whiteListStatusSource
   */
  exports.prototype['whiteListStatusSource'] = undefined;



  return exports;
}));


