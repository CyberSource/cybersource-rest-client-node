/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds model module.
   * @module model/PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds</code>.
   * Formatted as *{payoutsAcquirerName}. The property name field should be the same as the processor name for which the pull funds or push funds feature is being configured. Here is the list of valid processor names [TBD]
   * @alias module:model/PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds
   * @class
   * @param acquiringBIN {Number} This code identifies the financial institution acting as the acquirer of this transaction. The acquirer is the client or system user that signed the originator or installed the unattended cardholder- activated environment. When a processing center operates for multiple acquirers, this code is for the individual client or system user, not a code for the center.
   * @param cardAcceptorId {String} A unique identifier number for the originator of transfers that is unique to the processor or acquirer.
   * @param cardTerminalId {String} This field contains a code that identifies a terminal at the card acceptor location. This field is used in all messages related to a transaction. If sending transactions from a card not present environment, use the same value for all transactions.
   */
  var exports = function(acquiringBIN, cardAcceptorId, cardTerminalId) {
    var _this = this;


    _this['acquiringBIN'] = acquiringBIN;

    _this['cardAcceptorId'] = cardAcceptorId;


    _this['cardTerminalId'] = cardTerminalId;
  };

  /**
   * Constructs a <code>PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds} obj Optional instance to populate.
   * @return {module:model/PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds} The populated <code>PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('acquirerOrganizationId')) {
        obj['acquirerOrganizationId'] = ApiClient.convertToType(data['acquirerOrganizationId'], 'String');
      }
      if (data.hasOwnProperty('acquiringBIN')) {
        obj['acquiringBIN'] = ApiClient.convertToType(data['acquiringBIN'], 'Number');
      }
      if (data.hasOwnProperty('allowCryptoCurrencyPurchase')) {
        obj['allowCryptoCurrencyPurchase'] = ApiClient.convertToType(data['allowCryptoCurrencyPurchase'], 'Boolean');
      }
      if (data.hasOwnProperty('cardAcceptorId')) {
        obj['cardAcceptorId'] = ApiClient.convertToType(data['cardAcceptorId'], 'String');
      }
      if (data.hasOwnProperty('originatorMvv')) {
        obj['originatorMvv'] = ApiClient.convertToType(data['originatorMvv'], 'String');
      }
      if (data.hasOwnProperty('originatorNameAbbreviation')) {
        obj['originatorNameAbbreviation'] = ApiClient.convertToType(data['originatorNameAbbreviation'], 'String');
      }
      if (data.hasOwnProperty('cardTerminalId')) {
        obj['cardTerminalId'] = ApiClient.convertToType(data['cardTerminalId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Valid organization in OMS with an organizationInformation.type as \"acquirer\".
   * @member {String} acquirerOrganizationId
   */
  exports.prototype['acquirerOrganizationId'] = undefined;
  /**
   * This code identifies the financial institution acting as the acquirer of this transaction. The acquirer is the client or system user that signed the originator or installed the unattended cardholder- activated environment. When a processing center operates for multiple acquirers, this code is for the individual client or system user, not a code for the center.
   * @member {Number} acquiringBIN
   */
  exports.prototype['acquiringBIN'] = undefined;
  /**
   * This configuration allows a transaction to be flagged for cryptocurrency funds transfer.
   * @member {Boolean} allowCryptoCurrencyPurchase
   */
  exports.prototype['allowCryptoCurrencyPurchase'] = undefined;
  /**
   * A unique identifier number for the originator of transfers that is unique to the processor or acquirer.
   * @member {String} cardAcceptorId
   */
  exports.prototype['cardAcceptorId'] = undefined;
  /**
   * Merchant Verification Value (MVV) is used to identify originators that participate in a variety of programs. The MVV is unique to the merchant.
   * @member {String} originatorMvv
   */
  exports.prototype['originatorMvv'] = undefined;
  /**
   * A 4 character max name abbreviation for the originator.
   * @member {String} originatorNameAbbreviation
   */
  exports.prototype['originatorNameAbbreviation'] = undefined;
  /**
   * This field contains a code that identifies a terminal at the card acceptor location. This field is used in all messages related to a transaction. If sending transactions from a card not present environment, use the same value for all transactions.
   * @member {String} cardTerminalId
   */
  exports.prototype['cardTerminalId'] = undefined;



  return exports;
}));


