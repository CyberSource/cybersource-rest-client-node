/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2paymentsOrderInformationInvoiceDetails = factory(root.CyberSource.ApiClient, root.CyberSource.Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum);
  }
}(this, function(ApiClient, Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum) {
  'use strict';




  /**
   * The Ptsv2paymentsOrderInformationInvoiceDetails model module.
   * @module model/Ptsv2paymentsOrderInformationInvoiceDetails
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2paymentsOrderInformationInvoiceDetails</code>.
   * @alias module:model/Ptsv2paymentsOrderInformationInvoiceDetails
   * @class
   */
  var exports = function() {
    var _this = this;















  };

  /**
   * Constructs a <code>Ptsv2paymentsOrderInformationInvoiceDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2paymentsOrderInformationInvoiceDetails} obj Optional instance to populate.
   * @return {module:model/Ptsv2paymentsOrderInformationInvoiceDetails} The populated <code>Ptsv2paymentsOrderInformationInvoiceDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('invoiceNumber')) {
        obj['invoiceNumber'] = ApiClient.convertToType(data['invoiceNumber'], 'String');
      }
      if (data.hasOwnProperty('barcodeNumber')) {
        obj['barcodeNumber'] = ApiClient.convertToType(data['barcodeNumber'], 'String');
      }
      if (data.hasOwnProperty('expirationDate')) {
        obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'String');
      }
      if (data.hasOwnProperty('purchaseOrderNumber')) {
        obj['purchaseOrderNumber'] = ApiClient.convertToType(data['purchaseOrderNumber'], 'String');
      }
      if (data.hasOwnProperty('purchaseOrderDate')) {
        obj['purchaseOrderDate'] = ApiClient.convertToType(data['purchaseOrderDate'], 'String');
      }
      if (data.hasOwnProperty('purchaseContactName')) {
        obj['purchaseContactName'] = ApiClient.convertToType(data['purchaseContactName'], 'String');
      }
      if (data.hasOwnProperty('taxable')) {
        obj['taxable'] = ApiClient.convertToType(data['taxable'], 'Boolean');
      }
      if (data.hasOwnProperty('vatInvoiceReferenceNumber')) {
        obj['vatInvoiceReferenceNumber'] = ApiClient.convertToType(data['vatInvoiceReferenceNumber'], 'String');
      }
      if (data.hasOwnProperty('commodityCode')) {
        obj['commodityCode'] = ApiClient.convertToType(data['commodityCode'], 'String');
      }
      if (data.hasOwnProperty('merchandiseCode')) {
        obj['merchandiseCode'] = ApiClient.convertToType(data['merchandiseCode'], 'Number');
      }
      if (data.hasOwnProperty('transactionAdviceAddendum')) {
        obj['transactionAdviceAddendum'] = ApiClient.convertToType(data['transactionAdviceAddendum'], [Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum]);
      }
      if (data.hasOwnProperty('referenceDataCode')) {
        obj['referenceDataCode'] = ApiClient.convertToType(data['referenceDataCode'], 'String');
      }
      if (data.hasOwnProperty('referenceDataNumber')) {
        obj['referenceDataNumber'] = ApiClient.convertToType(data['referenceDataNumber'], 'String');
      }
      if (data.hasOwnProperty('salesSlipNumber')) {
        obj['salesSlipNumber'] = ApiClient.convertToType(data['salesSlipNumber'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Invoice Number.
   * @member {String} invoiceNumber
   */
  exports.prototype['invoiceNumber'] = undefined;
  /**
   * Barcode Number.
   * @member {String} barcodeNumber
   */
  exports.prototype['barcodeNumber'] = undefined;
  /**
   * Expiration Date.
   * @member {String} expirationDate
   */
  exports.prototype['expirationDate'] = undefined;
  /**
   * Value used by your customer to identify the order. This value is typically a purchase order number. CyberSource recommends that you do not populate the field with all zeros or nines.  For processor-specific information, see the `user_po` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html) 
   * @member {String} purchaseOrderNumber
   */
  exports.prototype['purchaseOrderNumber'] = undefined;
  /**
   * Date the order was processed. `Format: YYYY-MM-DD`.  For processor-specific information, see the `purchaser_order_date` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html) 
   * @member {String} purchaseOrderDate
   */
  exports.prototype['purchaseOrderDate'] = undefined;
  /**
   * The name of the individual or the company contacted for company authorized purchases.  For processor-specific information, see the `authorized_contact_name` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html) 
   * @member {String} purchaseContactName
   */
  exports.prototype['purchaseContactName'] = undefined;
  /**
   * Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.  If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include `invoiceDetails.taxable` in the data it sends to the processor.  For processor-specific information, see the `tax_indicator` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)  Possible values:  - **true**  - **false** 
   * @member {Boolean} taxable
   */
  exports.prototype['taxable'] = undefined;
  /**
   * VAT invoice number associated with the transaction.  For processor-specific information, see the `vat_invoice_ref_number` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html) 
   * @member {String} vatInvoiceReferenceNumber
   */
  exports.prototype['vatInvoiceReferenceNumber'] = undefined;
  /**
   * International description code of the overall orderâ€™s goods or services or the Categorizes purchases for VAT reporting. Contact your acquirer for a list of codes.  For processor-specific information, see the `summary_commodity_code` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html) 
   * @member {String} commodityCode
   */
  exports.prototype['commodityCode'] = undefined;
  /**
   * Identifier for the merchandise. Possible value:   - 1000: Gift card  This field is supported only for **American Express Direct**. 
   * @member {Number} merchandiseCode
   */
  exports.prototype['merchandiseCode'] = undefined;
  /**
   * @member {Array.<module:model/Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum>} transactionAdviceAddendum
   */
  exports.prototype['transactionAdviceAddendum'] = undefined;
  /**
   * Code that identifies the value of the `referenceDataNumber` field.  For the possible values, see \"Reference Data Codes\" in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/).  This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. 
   * @member {String} referenceDataCode
   */
  exports.prototype['referenceDataCode'] = undefined;
  /**
   * Reference number. The meaning of this value is identified by the value of the `referenceDataCode` field.  This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. 
   * @member {String} referenceDataNumber
   */
  exports.prototype['referenceDataNumber'] = undefined;
  /**
   * Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt. This field is supported only on Cybersource through Visanet and JCN gateway. 
   * @member {Number} salesSlipNumber
   */
  exports.prototype['salesSlipNumber'] = undefined;



  return exports;
}));


