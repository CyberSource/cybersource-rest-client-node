/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting model module.
   * @module model/PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting</code>.
   * @alias module:model/PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting
   * @class
   * @param standardEntryClassCodes {String} Mandatory  Free-text (csv)  Possible values (combination):  CCD — Cash Concentration or Disbursement, or CCD, is a charge or refund against a business checking account. One-time or recurring CCD transactions are fund transfers to or from a corporate entity. A standing authorization is required for recurring transactions. PPD — Prearranged Payment and Deposit Entry, or PPD, is a charge or refund against a customer's checking or savings account. PPD entries can only be originated when payment and deposit terms between the merchant and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions. TEL — Telephone-Initiated Entry, or TEL, is a one-time charge against a customer's checking or savings account. TEL transactions can only be originated when a business relationship between the merchant and the customer already exists; or if a relationship does not exist, then only when the customer initiates the telephone call to the merchant. Payment authorization is obtained from the customer by telephone. WEB — Internet-Initiated Entry or WEB is a charge against a customer's checking or savings account. One-time or recurring WEB transactions are originated through the Internet. Payment authorization is also obtained from the customer through the Internet. 
   * @param enableHold {Boolean} Mandatory  Determines whether CYBS has placed the merchant on a funding hold This will often be set to True for new merchants until the risk team has completed additional verification of their first transaction. It will be switched to \"false\" once underwriting review is completed and we are ready to start funding the merchant. 
   * @param monthlyTotalTransactionAmountLimit {Number} Mandatory  Monthly Maximum total Transaction Amount 12 digit including decimal 
   * @param holdingDays {Number} Mandatory  Funds Hold Days (Number of days funds will be held before it will be deposited into merchant account) 3 digits 
   * @param transactionAmountLimit {Number} Mandatory  Maximum total Transaction Amount This is a per transaction limit. For example, the merchant is limited to processing transactions under $100 12 digits (including decimal - USD only) 
   * @param riskReserveMethod {String} Mandatory Reserve Method  Possible value: - fixed - none Most merchants do not have a reserve attached to their account so the default value would be \"none.\"   For a Fixed Reserve, the reserve balance is established by either, (1) a receipt of a lump sum deposit from a merchant, or (2) withholding funds at a Reserve Rate established for the account from each batch settlement until the reserve balance is equal to a set Reserve Target. A Fixed Reserve may also be established by a combination of lump sum deposit and withholding of settlement funds.  A Rolling Reserve balance is established by withholding from a merchant's available settlement funds at a Reserve Rate (percentage) and no Reserve Target is specified. Rather, each amount withheld is retained for a specified number of Reserve Holding Days and then released back to the merchant. 
   * @param riskReserveRate {Number} Mandatory  Reserve Rate (% of TPV)=> Relevant for Rolling Reserve and Fixed Reserve The percentage rate at which risk funds are withheld from each eCheck.Net batch settlement. 
   * @param riskReserveTargetAmount {Number} Mandatory  Reserve Target (fixed $ amount)=> Relevant for Fixed Reserve ONLY  The maximum dollar amount that can be held in Risk Reserve for a fixed reserve. Once risk withholdings reach the Reserve Target established for the eCheck.Net account, a portion of available funds will be deposited to the merchant's bank account 12 digit including decimal 
   */
  var exports = function(standardEntryClassCodes, enableHold, monthlyTotalTransactionAmountLimit, holdingDays, transactionAmountLimit, riskReserveMethod, riskReserveRate, riskReserveTargetAmount) {
    var _this = this;

    _this['standardEntryClassCodes'] = standardEntryClassCodes;
    _this['enableHold'] = enableHold;
    _this['monthlyTotalTransactionAmountLimit'] = monthlyTotalTransactionAmountLimit;
    _this['holdingDays'] = holdingDays;

    _this['transactionAmountLimit'] = transactionAmountLimit;
    _this['riskReserveMethod'] = riskReserveMethod;
    _this['riskReserveRate'] = riskReserveRate;
    _this['riskReserveTargetAmount'] = riskReserveTargetAmount;

  };

  /**
   * Constructs a <code>PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting} obj Optional instance to populate.
   * @return {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting} The populated <code>PaymentsProductsECheckConfigurationInformationConfigurationsUnderwriting</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('standardEntryClassCodes')) {
        obj['standardEntryClassCodes'] = ApiClient.convertToType(data['standardEntryClassCodes'], 'String');
      }
      if (data.hasOwnProperty('enableHold')) {
        obj['enableHold'] = ApiClient.convertToType(data['enableHold'], 'Boolean');
      }
      if (data.hasOwnProperty('monthlyTotalTransactionAmountLimit')) {
        obj['monthlyTotalTransactionAmountLimit'] = ApiClient.convertToType(data['monthlyTotalTransactionAmountLimit'], 'Number');
      }
      if (data.hasOwnProperty('holdingDays')) {
        obj['holdingDays'] = ApiClient.convertToType(data['holdingDays'], 'Number');
      }
      if (data.hasOwnProperty('enableCredits')) {
        obj['enableCredits'] = ApiClient.convertToType(data['enableCredits'], 'Boolean');
      }
      if (data.hasOwnProperty('transactionAmountLimit')) {
        obj['transactionAmountLimit'] = ApiClient.convertToType(data['transactionAmountLimit'], 'Number');
      }
      if (data.hasOwnProperty('riskReserveMethod')) {
        obj['riskReserveMethod'] = ApiClient.convertToType(data['riskReserveMethod'], 'String');
      }
      if (data.hasOwnProperty('riskReserveRate')) {
        obj['riskReserveRate'] = ApiClient.convertToType(data['riskReserveRate'], 'Number');
      }
      if (data.hasOwnProperty('riskReserveTargetAmount')) {
        obj['riskReserveTargetAmount'] = ApiClient.convertToType(data['riskReserveTargetAmount'], 'Number');
      }
      if (data.hasOwnProperty('solutionOrganizationId')) {
        obj['solutionOrganizationId'] = ApiClient.convertToType(data['solutionOrganizationId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Mandatory  Free-text (csv)  Possible values (combination):  CCD — Cash Concentration or Disbursement, or CCD, is a charge or refund against a business checking account. One-time or recurring CCD transactions are fund transfers to or from a corporate entity. A standing authorization is required for recurring transactions. PPD — Prearranged Payment and Deposit Entry, or PPD, is a charge or refund against a customer's checking or savings account. PPD entries can only be originated when payment and deposit terms between the merchant and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions. TEL — Telephone-Initiated Entry, or TEL, is a one-time charge against a customer's checking or savings account. TEL transactions can only be originated when a business relationship between the merchant and the customer already exists; or if a relationship does not exist, then only when the customer initiates the telephone call to the merchant. Payment authorization is obtained from the customer by telephone. WEB — Internet-Initiated Entry or WEB is a charge against a customer's checking or savings account. One-time or recurring WEB transactions are originated through the Internet. Payment authorization is also obtained from the customer through the Internet. 
   * @member {String} standardEntryClassCodes
   * @default 'CCD,PPD,TEL,WEB'
   */
  exports.prototype['standardEntryClassCodes'] = 'CCD,PPD,TEL,WEB';
  /**
   * Mandatory  Determines whether CYBS has placed the merchant on a funding hold This will often be set to True for new merchants until the risk team has completed additional verification of their first transaction. It will be switched to \"false\" once underwriting review is completed and we are ready to start funding the merchant. 
   * @member {Boolean} enableHold
   * @default true
   */
  exports.prototype['enableHold'] = true;
  /**
   * Mandatory  Monthly Maximum total Transaction Amount 12 digit including decimal 
   * @member {Number} monthlyTotalTransactionAmountLimit
   */
  exports.prototype['monthlyTotalTransactionAmountLimit'] = undefined;
  /**
   * Mandatory  Funds Hold Days (Number of days funds will be held before it will be deposited into merchant account) 3 digits 
   * @member {Number} holdingDays
   */
  exports.prototype['holdingDays'] = undefined;
  /**
   * Optional  Allow Credits (True/False) 
   * @member {Boolean} enableCredits
   */
  exports.prototype['enableCredits'] = undefined;
  /**
   * Mandatory  Maximum total Transaction Amount This is a per transaction limit. For example, the merchant is limited to processing transactions under $100 12 digits (including decimal - USD only) 
   * @member {Number} transactionAmountLimit
   */
  exports.prototype['transactionAmountLimit'] = undefined;
  /**
   * Mandatory Reserve Method  Possible value: - fixed - none Most merchants do not have a reserve attached to their account so the default value would be \"none.\"   For a Fixed Reserve, the reserve balance is established by either, (1) a receipt of a lump sum deposit from a merchant, or (2) withholding funds at a Reserve Rate established for the account from each batch settlement until the reserve balance is equal to a set Reserve Target. A Fixed Reserve may also be established by a combination of lump sum deposit and withholding of settlement funds.  A Rolling Reserve balance is established by withholding from a merchant's available settlement funds at a Reserve Rate (percentage) and no Reserve Target is specified. Rather, each amount withheld is retained for a specified number of Reserve Holding Days and then released back to the merchant. 
   * @member {String} riskReserveMethod
   */
  exports.prototype['riskReserveMethod'] = undefined;
  /**
   * Mandatory  Reserve Rate (% of TPV)=> Relevant for Rolling Reserve and Fixed Reserve The percentage rate at which risk funds are withheld from each eCheck.Net batch settlement. 
   * @member {Number} riskReserveRate
   */
  exports.prototype['riskReserveRate'] = undefined;
  /**
   * Mandatory  Reserve Target (fixed $ amount)=> Relevant for Fixed Reserve ONLY  The maximum dollar amount that can be held in Risk Reserve for a fixed reserve. Once risk withholdings reach the Reserve Target established for the eCheck.Net account, a portion of available funds will be deposited to the merchant's bank account 12 digit including decimal 
   * @member {Number} riskReserveTargetAmount
   */
  exports.prototype['riskReserveTargetAmount'] = undefined;
  /**
   * Solution organization id
   * @member {String} solutionOrganizationId
   */
  exports.prototype['solutionOrganizationId'] = undefined;



  return exports;
}));


