/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PtsV2PaymentsPost201ResponseOrderInformationAmountDetails = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PtsV2PaymentsPost201ResponseOrderInformationAmountDetails model module.
   * @module model/PtsV2PaymentsPost201ResponseOrderInformationAmountDetails
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PtsV2PaymentsPost201ResponseOrderInformationAmountDetails</code>.
   * @alias module:model/PtsV2PaymentsPost201ResponseOrderInformationAmountDetails
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>PtsV2PaymentsPost201ResponseOrderInformationAmountDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PtsV2PaymentsPost201ResponseOrderInformationAmountDetails} obj Optional instance to populate.
   * @return {module:model/PtsV2PaymentsPost201ResponseOrderInformationAmountDetails} The populated <code>PtsV2PaymentsPost201ResponseOrderInformationAmountDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('totalAmount')) {
        obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'String');
      }
      if (data.hasOwnProperty('authorizedAmount')) {
        obj['authorizedAmount'] = ApiClient.convertToType(data['authorizedAmount'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('settlementAmount')) {
        obj['settlementAmount'] = ApiClient.convertToType(data['settlementAmount'], 'String');
      }
      if (data.hasOwnProperty('settlementCurrency')) {
        obj['settlementCurrency'] = ApiClient.convertToType(data['settlementCurrency'], 'String');
      }
      if (data.hasOwnProperty('originalAmount')) {
        obj['originalAmount'] = ApiClient.convertToType(data['originalAmount'], 'String');
      }
      if (data.hasOwnProperty('originalCurrency')) {
        obj['originalCurrency'] = ApiClient.convertToType(data['originalCurrency'], 'String');
      }
      if (data.hasOwnProperty('processorTransactionFee')) {
        obj['processorTransactionFee'] = ApiClient.convertToType(data['processorTransactionFee'], 'String');
      }
      if (data.hasOwnProperty('exchangeRate')) {
        obj['exchangeRate'] = ApiClient.convertToType(data['exchangeRate'], 'String');
      }
      if (data.hasOwnProperty('foreignCurrency')) {
        obj['foreignCurrency'] = ApiClient.convertToType(data['foreignCurrency'], 'String');
      }
      if (data.hasOwnProperty('foreignAmount')) {
        obj['foreignAmount'] = ApiClient.convertToType(data['foreignAmount'], 'String');
      }
      if (data.hasOwnProperty('discountAmount')) {
        obj['discountAmount'] = ApiClient.convertToType(data['discountAmount'], 'String');
      }
    }
    return obj;
  }

  /**
   * Amount you requested for the payment or capture.  This value is returned for partial authorizations. This field is also returned on incremental authorizations will contain the aggregated amount from the original authorizations and all the incremental authorizations. 
   * @member {String} totalAmount
   */
  exports.prototype['totalAmount'] = undefined;
  /**
   * Amount that was authorized.  Returned by authorization service.  #### PIN debit Amount of the purchase.  Returned by PIN debit purchase. 
   * @member {String} authorizedAmount
   */
  exports.prototype['authorizedAmount'] = undefined;
  /**
   * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. 
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder's account. This field is returned for OCT transactions. 
   * @member {String} settlementAmount
   */
  exports.prototype['settlementAmount'] = undefined;
  /**
   * This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account. This field is returned for OCT transactions. 
   * @member {String} settlementCurrency
   */
  exports.prototype['settlementCurrency'] = undefined;
  /**
   * Amount in your original local pricing currency.  This value cannot be negative. You can include a decimal point (.) in this field to denote the currency exponent, but you cannot include any other special characters.  If needed, CyberSource truncates the amount to the correct number of decimal places. 
   * @member {String} originalAmount
   */
  exports.prototype['originalAmount'] = undefined;
  /**
   * Your local pricing currency code.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) 
   * @member {String} originalCurrency
   */
  exports.prototype['originalCurrency'] = undefined;
  /**
   * Amount up to N digit after the decimals separator as defined in ISO 4217 for the appropriate currency code. 
   * @member {String} processorTransactionFee
   */
  exports.prototype['processorTransactionFee'] = undefined;
  /**
   * The rate of conversion of the currency given in the request to CNY. The conversion happens at the time when Alipay's trade order is created 
   * @member {String} exchangeRate
   */
  exports.prototype['exchangeRate'] = undefined;
  /**
   * Currency code for the transaction performed in cross border currency. 
   * @member {String} foreignCurrency
   */
  exports.prototype['foreignCurrency'] = undefined;
  /**
   * The transaction amount in CNY. 
   * @member {String} foreignAmount
   */
  exports.prototype['foreignAmount'] = undefined;
  /**
   * If coupons/vouchers are used in the transaction, the discount amount redeemed in the settlement currency will be returned. Otherwise, no return. 
   * @member {String} discountAmount
   */
  exports.prototype['discountAmount'] = undefined;



  return exports;
}));


