/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2billingagreementsConsumerAuthenticationInformation = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Ptsv2billingagreementsConsumerAuthenticationInformation model module.
   * @module model/Ptsv2billingagreementsConsumerAuthenticationInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2billingagreementsConsumerAuthenticationInformation</code>.
   * @alias module:model/Ptsv2billingagreementsConsumerAuthenticationInformation
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>Ptsv2billingagreementsConsumerAuthenticationInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2billingagreementsConsumerAuthenticationInformation} obj Optional instance to populate.
   * @return {module:model/Ptsv2billingagreementsConsumerAuthenticationInformation} The populated <code>Ptsv2billingagreementsConsumerAuthenticationInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('authenticationTransactionContextId')) {
        obj['authenticationTransactionContextId'] = ApiClient.convertToType(data['authenticationTransactionContextId'], 'String');
      }
      if (data.hasOwnProperty('cavv')) {
        obj['cavv'] = ApiClient.convertToType(data['cavv'], 'String');
      }
      if (data.hasOwnProperty('transactionToken')) {
        obj['transactionToken'] = ApiClient.convertToType(data['transactionToken'], 'String');
      }
      if (data.hasOwnProperty('xid')) {
        obj['xid'] = ApiClient.convertToType(data['xid'], 'String');
      }
    }
    return obj;
  }

  /**
   * Payer authentication transaction identifier passed to link the validation and authorization calls. 
   * @member {String} authenticationTransactionContextId
   */
  exports.prototype['authenticationTransactionContextId'] = undefined;
  /**
   * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 
   * @member {String} cavv
   */
  exports.prototype['cavv'] = undefined;
  /**
   * Web based token used to authenticate consumer with Rupay authentication provider. 
   * @member {String} transactionToken
   */
  exports.prototype['transactionToken'] = undefined;
  /**
   * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`) 
   * @member {String} xid
   */
  exports.prototype['xid'] = undefined;



  return exports;
}));


