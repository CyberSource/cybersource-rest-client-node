/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors model module.
   * @module model/PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors</code>.
   * @alias module:model/PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors} obj Optional instance to populate.
   * @return {module:model/PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors} The populated <code>PaymentsProductsCardProcessingConfigurationInformationConfigurationsFeaturesCardPresentProcessors</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('defaultPointOfSaleTerminalId')) {
        obj['defaultPointOfSaleTerminalId'] = ApiClient.convertToType(data['defaultPointOfSaleTerminalId'], 'String');
      }
      if (data.hasOwnProperty('pointOfSaleTerminalIds')) {
        obj['pointOfSaleTerminalIds'] = ApiClient.convertToType(data['pointOfSaleTerminalIds'], ['String']);
      }
      if (data.hasOwnProperty('disablePointOfSaleTerminalIdValidation')) {
        obj['disablePointOfSaleTerminalIdValidation'] = ApiClient.convertToType(data['disablePointOfSaleTerminalIdValidation'], 'Boolean');
      }
      if (data.hasOwnProperty('pinDebitNetworkOrder')) {
        obj['pinDebitNetworkOrder'] = ApiClient.convertToType(data['pinDebitNetworkOrder'], 'String');
      }
      if (data.hasOwnProperty('pinDebitReimbursementCode')) {
        obj['pinDebitReimbursementCode'] = ApiClient.convertToType(data['pinDebitReimbursementCode'], 'String');
      }
      if (data.hasOwnProperty('financialInstitutionId')) {
        obj['financialInstitutionId'] = ApiClient.convertToType(data['financialInstitutionId'], 'String');
      }
      if (data.hasOwnProperty('enablePinTranslation')) {
        obj['enablePinTranslation'] = ApiClient.convertToType(data['enablePinTranslation'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC, GPX (gpx), American Express Direct (amexdirect) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Min. Length</th><th>Max. Length</th><th>Regex</th><th>Default Value</th></tr></thead> <tr><td>American Express Direct</td><td>cp</td><td>Yes</td><td>4</td><td>8</td><td>^[0-9a-zA-Z]+$</td><td>1111</td></tr> </table> 
   * @member {String} defaultPointOfSaleTerminalId
   */
  exports.prototype['defaultPointOfSaleTerminalId'] = undefined;
  /**
   * For retail transactions, if merchant chooses to send the terminal id in the API, then that value has to be validated before being used. Holds a comma separated list of all possible terminal ids that the merchant is likely to send. Applicable for VPC processors.
   * @member {Array.<String>} pointOfSaleTerminalIds
   */
  exports.prototype['pointOfSaleTerminalIds'] = undefined;
  /**
   * Disables terminal ID validation. Applicable for VPC processors.
   * @member {Boolean} disablePointOfSaleTerminalIdValidation
   */
  exports.prototype['disablePointOfSaleTerminalIdValidation'] = undefined;
  /**
   * Order of the networks in which Visa should make routing decisions. Applicable for GPX (gpx) and VPC processors.
   * @member {String} pinDebitNetworkOrder
   */
  exports.prototype['pinDebitNetworkOrder'] = undefined;
  /**
   * This attribute requests VIP to qualify a given PIN Debit transaction for a certain type of interchange program. Y = SMS supermarket, Z = SMS general merchant. Applicable for GPX (gpx) and VPC processors.
   * @member {String} pinDebitReimbursementCode
   */
  exports.prototype['pinDebitReimbursementCode'] = undefined;
  /**
   * Acquirer Institution ID for the PIN Debit Transactions. Applicable for GPX (gpx) and VPC processors.
   * @member {String} financialInstitutionId
   */
  exports.prototype['financialInstitutionId'] = undefined;
  /**
   * Enables CyberSource PIN Translation for Online PIN Transactions. Please ensure you have exchanged PIN keys with CyberSource to use this feature. Applicable for VPC processors.
   * @member {Boolean} enablePinTranslation
   */
  exports.prototype['enablePinTranslation'] = undefined;



  return exports;
}));


