/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2paymentsProcessingInformationAuthorizationOptions = factory(root.CyberSource.ApiClient, root.CyberSource.Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator);
  }
}(this, function(ApiClient, Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator) {
  'use strict';




  /**
   * The Ptsv2paymentsProcessingInformationAuthorizationOptions model module.
   * @module model/Ptsv2paymentsProcessingInformationAuthorizationOptions
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2paymentsProcessingInformationAuthorizationOptions</code>.
   * @alias module:model/Ptsv2paymentsProcessingInformationAuthorizationOptions
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>Ptsv2paymentsProcessingInformationAuthorizationOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2paymentsProcessingInformationAuthorizationOptions} obj Optional instance to populate.
   * @return {module:model/Ptsv2paymentsProcessingInformationAuthorizationOptions} The populated <code>Ptsv2paymentsProcessingInformationAuthorizationOptions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('authType')) {
        obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
      }
      if (data.hasOwnProperty('verbalAuthCode')) {
        obj['verbalAuthCode'] = ApiClient.convertToType(data['verbalAuthCode'], 'String');
      }
      if (data.hasOwnProperty('verbalAuthTransactionId')) {
        obj['verbalAuthTransactionId'] = ApiClient.convertToType(data['verbalAuthTransactionId'], 'String');
      }
      if (data.hasOwnProperty('authIndicator')) {
        obj['authIndicator'] = ApiClient.convertToType(data['authIndicator'], 'String');
      }
      if (data.hasOwnProperty('partialAuthIndicator')) {
        obj['partialAuthIndicator'] = ApiClient.convertToType(data['partialAuthIndicator'], 'Boolean');
      }
      if (data.hasOwnProperty('balanceInquiry')) {
        obj['balanceInquiry'] = ApiClient.convertToType(data['balanceInquiry'], 'Boolean');
      }
      if (data.hasOwnProperty('ignoreAvsResult')) {
        obj['ignoreAvsResult'] = ApiClient.convertToType(data['ignoreAvsResult'], 'Boolean');
      }
      if (data.hasOwnProperty('declineAvsFlags')) {
        obj['declineAvsFlags'] = ApiClient.convertToType(data['declineAvsFlags'], ['String']);
      }
      if (data.hasOwnProperty('ignoreCvResult')) {
        obj['ignoreCvResult'] = ApiClient.convertToType(data['ignoreCvResult'], 'Boolean');
      }
      if (data.hasOwnProperty('initiator')) {
        obj['initiator'] = Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator.constructFromObject(data['initiator']);
      }
      if (data.hasOwnProperty('billPayment')) {
        obj['billPayment'] = ApiClient.convertToType(data['billPayment'], 'Boolean');
      }
      if (data.hasOwnProperty('billPaymentType')) {
        obj['billPaymentType'] = ApiClient.convertToType(data['billPaymentType'], 'String');
      }
    }
    return obj;
  }

  /**
   * Authorization type.  Possible values:   - **AUTOCAPTURE**: automatic capture.  - **STANDARDCAPTURE**: standard capture.  - **VERBAL**: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  **Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing**\\ Set this field to _AUTOCAPTURE_ and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to STANDARDCAPTURE and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see \"Automatic Captures,\" page 33.  **Forced Capture**\\ Set this field to _VERBAL_ and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system. For more information, see \"Forced Captures,\" page 123.  **Verbal Authorization**\\ Set this field to _VERBAL_ and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \"Verbal Authorizations,\" page 84.  For processor-specific information, see the auth_type field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html) 
   * @member {String} authType
   */
  exports.prototype['authType'] = undefined;
  /**
   * Authorization code.  **Forced Capture**\\ Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  **Verbal Authorization**\\ Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the _auth_code_ field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html) 
   * @member {String} verbalAuthCode
   */
  exports.prototype['verbalAuthCode'] = undefined;
  /**
   * Transaction ID (TID).
   * @member {String} verbalAuthTransactionId
   */
  exports.prototype['verbalAuthTransactionId'] = undefined;
  /**
   * Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support. See \"Final Authorization Indicator,\" page 119.  Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file5:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file.  For processor-specific information, see the auth_indicator field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html) 
   * @member {String} authIndicator
   */
  exports.prototype['authIndicator'] = undefined;
  /**
   * Flag that indicates whether the transaction is enabled for partial authorization or not. When your request includes this field, this value overrides the information in your CyberSource account.  For processor-specific information, see the _auth_partial_auth_indicator_ field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  **CyberSource through VisaNet**\\ To set the default for this field, contact CyberSource Customer Support. The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 164 - Field: Additional Authorization Indicators  Possible values: - **true** Enable the transaction for partial authorization. - **false** Do not enable the transaction for partial authorization. 
   * @member {Boolean} partialAuthIndicator
   */
  exports.prototype['partialAuthIndicator'] = undefined;
  /**
   * Flag that indicates whether to return balance information.  Possible values: - **true** - **false** 
   * @member {Boolean} balanceInquiry
   */
  exports.prototype['balanceInquiry'] = undefined;
  /**
   * Flag that indicates whether to allow the capture service to run, even when the payment receives an AVS decline.  Possible values: - **true**  Ignore the results of AVS checking and run the capture service. - **false**  (default): If the authorization receives an AVS decline, do not run the capture service. 
   * @member {Boolean} ignoreAvsResult
   * @default false
   */
  exports.prototype['ignoreAvsResult'] = false;
  /**
   * An array of AVS flags that cause the reply flag to be returned.  `Important` To receive declines for the AVS code N, include the value N in the array.  Possible values: - D - A - V - S - N - O 
   * @member {Array.<module:model/Ptsv2paymentsProcessingInformationAuthorizationOptions.DeclineAvsFlagsEnum>} declineAvsFlags
   */
  exports.prototype['declineAvsFlags'] = undefined;
  /**
   * Flag that indicates whether to allow the capture service to run even when the payment receives a CVN decline.  Possible values: - **true**  Ignore the results of CVN checking and run the capture service. - **false**  (default) If the authorization receives a CVN decline, do not run the capture service. 
   * @member {Boolean} ignoreCvResult
   * @default false
   */
  exports.prototype['ignoreCvResult'] = false;
  /**
   * @member {module:model/Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator} initiator
   */
  exports.prototype['initiator'] = undefined;
  /**
   * Flag that indicates that this is a payment for a bill or for an existing contractual loan. See \"Visa Bill Payments,\" page 220, and \"Visa Debt Repayments,\" page 221, for lists of processors that support these features.  Possible values: - true: Bill payment or loan payment. - false (default): Not a bill payment or loan payment. 
   * @member {Boolean} billPayment
   */
  exports.prototype['billPayment'] = undefined;
  /**
   * Reason for the payment.  Possible values: - 001: Utility payment - 002: Government services - 003: Mobile phone top-up - 004: Coupon payment  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 48-50 - Field: Bill Payment Transaction Type Identifier  This field is supported only for bill payments in Brazil with Mastercard on CyberSource through VisaNet. See Mastercard Bill Payments.  Note For information about bill payments with Visa, see Visa Bill Payments. 
   * @member {String} billPaymentType
   */
  exports.prototype['billPaymentType'] = undefined;


  /**
   * Allowed values for the <code>declineAvsFlags</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DeclineAvsFlagsEnum = {
    /**
     * value: "D"
     * @const
     */
    "D": "D",
    /**
     * value: "A"
     * @const
     */
    "A": "A",
    /**
     * value: "V"
     * @const
     */
    "V": "V",
    /**
     * value: "S"
     * @const
     */
    "S": "S",
    /**
     * value: "N"
     * @const
     */
    "N": "N",
    /**
     * value: "O"
     * @const
     */
    "O": "O"  };


  return exports;
}));


