/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors model module.
   * @module model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors</code>.
   * Name of the payment processor. Example - \&quot;wellsfargoach\&quot;
   * @alias module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors} obj Optional instance to populate.
   * @return {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors} The populated <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('enableCCS')) {
        obj['enableCCS'] = ApiClient.convertToType(data['enableCCS'], 'Boolean');
      }
      if (data.hasOwnProperty('terminalId')) {
        obj['terminalId'] = ApiClient.convertToType(data['terminalId'], 'String');
      }
      if (data.hasOwnProperty('enable15anTransactionReferenceNumber')) {
        obj['enable15anTransactionReferenceNumber'] = ApiClient.convertToType(data['enable15anTransactionReferenceNumber'], 'Boolean');
      }
      if (data.hasOwnProperty('portalSupportedPaytypes')) {
        obj['portalSupportedPaytypes'] = ApiClient.convertToType(data['portalSupportedPaytypes'], 'String');
      }
      if (data.hasOwnProperty('setCompletedState')) {
        obj['setCompletedState'] = ApiClient.convertToType(data['setCompletedState'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * *NEW* Flag to indicate whether the processor is migrated to the Common Connectivity Services Platform. Applicable for VPC and amexdirect processors. 
   * @member {Boolean} enableCCS
   */
  exports.prototype['enableCCS'] = undefined;
  /**
   * *NEW* The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC processors. 
   * @member {String} terminalId
   */
  exports.prototype['terminalId'] = undefined;
  /**
   * *NEW* This ensures the transaction reference # contains an identifier that can be viewed in CYBS
   * @member {Boolean} enable15anTransactionReferenceNumber
   * @default true
   */
  exports.prototype['enable15anTransactionReferenceNumber'] = true;
  /**
   * *NEW* This is used by the EBC2 application
   * @member {String} portalSupportedPaytypes
   * @default 'CHECK'
   */
  exports.prototype['portalSupportedPaytypes'] = 'CHECK';
  /**
   * *Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.
   * @member {Boolean} setCompletedState
   * @default false
   */
  exports.prototype['setCompletedState'] = false;



  return exports;
}));


