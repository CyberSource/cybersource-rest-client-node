/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PostDeviceSearchRequestV3 = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PostDeviceSearchRequestV3 model module.
   * @module model/PostDeviceSearchRequestV3
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PostDeviceSearchRequestV3</code>.
   * @alias module:model/PostDeviceSearchRequestV3
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>PostDeviceSearchRequestV3</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PostDeviceSearchRequestV3} obj Optional instance to populate.
   * @return {module:model/PostDeviceSearchRequestV3} The populated <code>PostDeviceSearchRequestV3</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('query')) {
        obj['query'] = ApiClient.convertToType(data['query'], 'String');
      }
      if (data.hasOwnProperty('sort')) {
        obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
      }
      if (data.hasOwnProperty('limit')) {
        obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The Search Query to retrieve the Terminals.(Example :- serialNumber:456345234 AND readerId:509353f0-86ca-4af4-a1c9-c2702bfd7431  AND terminalId:7854922 AND status:Inactive AND statusChangeReason:Other AND organizationId:London Store)
   * @member {String} query
   */
  exports.prototype['query'] = undefined;
  /**
   * terminalCreationDate:desc (default) or serialNumber or terminalUpdationDate
   * @member {String} sort
   */
  exports.prototype['sort'] = undefined;
  /**
   * The offset or page number.
   * @member {Number} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * Number of devices to retrieve in one request.
   * @member {Number} limit
   */
  exports.prototype['limit'] = undefined;



  return exports;
}));


