/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors model module.
   * @module model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors</code>.
   * Payment Processing connection used to support eCheck, aka ACH, payment methods. Example - \&quot;bofaach\&quot;
   * @alias module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors
   * @class
   * @param companyEntryDescription {String} *EXISTING* Company (merchant) defined description of entry to receive.  For e.g. PAYROLL, GAS BILL, INS PREM. This field is alphanumeric
   */
  var exports = function(companyEntryDescription) {
    var _this = this;

    _this['companyEntryDescription'] = companyEntryDescription;




  };

  /**
   * Constructs a <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors} obj Optional instance to populate.
   * @return {module:model/PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors} The populated <code>PaymentsProductsECheckConfigurationInformationConfigurationsCommonProcessors</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('companyEntryDescription')) {
        obj['companyEntryDescription'] = ApiClient.convertToType(data['companyEntryDescription'], 'String');
      }
      if (data.hasOwnProperty('companyId')) {
        obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
      }
      if (data.hasOwnProperty('batchGroup')) {
        obj['batchGroup'] = ApiClient.convertToType(data['batchGroup'], 'String');
      }
      if (data.hasOwnProperty('enableAccuityForAvs')) {
        obj['enableAccuityForAvs'] = ApiClient.convertToType(data['enableAccuityForAvs'], 'Boolean');
      }
      if (data.hasOwnProperty('setCompletedState')) {
        obj['setCompletedState'] = ApiClient.convertToType(data['setCompletedState'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * *EXISTING* Company (merchant) defined description of entry to receive.  For e.g. PAYROLL, GAS BILL, INS PREM. This field is alphanumeric
   * @member {String} companyEntryDescription
   */
  exports.prototype['companyEntryDescription'] = undefined;
  /**
   * *EXISTING* company ID assigned to merchant by Acquiring bank. This field is alphanumeric
   * @member {String} companyId
   */
  exports.prototype['companyId'] = undefined;
  /**
   * *EXISTING* Capture requests are grouped into a batch bound for your payment processor. The batch time can be identified by reading the last 2-digits as military time. E.g., <processor>_16 = your processing cutoff is 4PM PST. Please note if you are in a different location you may then need to convert time zone as well.
   * @member {String} batchGroup
   */
  exports.prototype['batchGroup'] = undefined;
  /**
   * *NEW* Accuity is the original validation service that checks the account/routing number for formatting issues. Used by WF and set to \"Yes\" unless told otherwise
   * @member {Boolean} enableAccuityForAvs
   * @default true
   */
  exports.prototype['enableAccuityForAvs'] = true;
  /**
   * *Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.
   * @member {Boolean} setCompletedState
   * @default false
   */
  exports.prototype['setCompletedState'] = false;



  return exports;
}));


