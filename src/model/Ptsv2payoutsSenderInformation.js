/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ptsv2payoutsSenderInformationAccount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Ptsv2payoutsSenderInformationAccount'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2payoutsSenderInformation = factory(root.CyberSource.ApiClient, root.CyberSource.Ptsv2payoutsSenderInformationAccount);
  }
}(this, function(ApiClient, Ptsv2payoutsSenderInformationAccount) {
  'use strict';




  /**
   * The Ptsv2payoutsSenderInformation model module.
   * @module model/Ptsv2payoutsSenderInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2payoutsSenderInformation</code>.
   * @alias module:model/Ptsv2payoutsSenderInformation
   * @class
   */
  var exports = function() {
    var _this = this;



















  };

  /**
   * Constructs a <code>Ptsv2payoutsSenderInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2payoutsSenderInformation} obj Optional instance to populate.
   * @return {module:model/Ptsv2payoutsSenderInformation} The populated <code>Ptsv2payoutsSenderInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('referenceNumber')) {
        obj['referenceNumber'] = ApiClient.convertToType(data['referenceNumber'], 'String');
      }
      if (data.hasOwnProperty('account')) {
        obj['account'] = Ptsv2payoutsSenderInformationAccount.constructFromObject(data['account']);
      }
      if (data.hasOwnProperty('firstName')) {
        obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
      }
      if (data.hasOwnProperty('middleInitial')) {
        obj['middleInitial'] = ApiClient.convertToType(data['middleInitial'], 'String');
      }
      if (data.hasOwnProperty('middleName')) {
        obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
      }
      if (data.hasOwnProperty('lastName')) {
        obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('address1')) {
        obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
      }
      if (data.hasOwnProperty('locality')) {
        obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
      }
      if (data.hasOwnProperty('administrativeArea')) {
        obj['administrativeArea'] = ApiClient.convertToType(data['administrativeArea'], 'String');
      }
      if (data.hasOwnProperty('countryCode')) {
        obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
      }
      if (data.hasOwnProperty('postalCode')) {
        obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
      }
      if (data.hasOwnProperty('phoneNumber')) {
        obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
      }
      if (data.hasOwnProperty('dateOfBirth')) {
        obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'String');
      }
      if (data.hasOwnProperty('vatRegistrationNumber')) {
        obj['vatRegistrationNumber'] = ApiClient.convertToType(data['vatRegistrationNumber'], 'String');
      }
      if (data.hasOwnProperty('personalIdType')) {
        obj['personalIdType'] = ApiClient.convertToType(data['personalIdType'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('identificationNumber')) {
        obj['identificationNumber'] = ApiClient.convertToType(data['identificationNumber'], 'String');
      }
    }
    return obj;
  }

  /**
   * Reference number generated by you that uniquely identifies the sender.
   * @member {String} referenceNumber
   */
  exports.prototype['referenceNumber'] = undefined;
  /**
   * @member {module:model/Ptsv2payoutsSenderInformationAccount} account
   */
  exports.prototype['account'] = undefined;
  /**
   * First name of sender (Optional). * CTV (14) * Paymentech (30) 
   * @member {String} firstName
   */
  exports.prototype['firstName'] = undefined;
  /**
   * Recipient middle initial (Optional). 
   * @member {String} middleInitial
   */
  exports.prototype['middleInitial'] = undefined;
  /**
   * Sender’s middle name. This field is a _passthrough_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 
   * @member {String} middleName
   */
  exports.prototype['middleName'] = undefined;
  /**
   * Recipient last name (Optional). * CTV (14) * Paymentech (30) 
   * @member {String} lastName
   */
  exports.prototype['lastName'] = undefined;
  /**
   * Name of sender.  **Funds Disbursement**  This value is the name of the originator sending the funds disbursement. * CTV, Paymentech (30) 
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Street address of sender.  **Funds Disbursement**  This value is the address of the originator sending the funds disbursement. 
   * @member {String} address1
   */
  exports.prototype['address1'] = undefined;
  /**
   * City of sender.  **Funds Disbursement**  This value is the city of the originator sending the funds disbursement. 
   * @member {String} locality
   */
  exports.prototype['locality'] = undefined;
  /**
   * Sender’s state. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). 
   * @member {String} administrativeArea
   */
  exports.prototype['administrativeArea'] = undefined;
  /**
   * Country of sender. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). * CTV (3) 
   * @member {String} countryCode
   */
  exports.prototype['countryCode'] = undefined;
  /**
   * Sender’s postal code. Required only for FDCCompass.
   * @member {String} postalCode
   */
  exports.prototype['postalCode'] = undefined;
  /**
   * Sender’s phone number. Required only for FDCCompass.
   * @member {String} phoneNumber
   */
  exports.prototype['phoneNumber'] = undefined;
  /**
   * Sender’s date of birth in YYYYMMDD format. Required only for FDCCompass.
   * @member {String} dateOfBirth
   */
  exports.prototype['dateOfBirth'] = undefined;
  /**
   * Customer's government-assigned tax identification number. 
   * @member {String} vatRegistrationNumber
   */
  exports.prototype['vatRegistrationNumber'] = undefined;
  /**
   * #### Visa Platform Connect This tag will contain the type of sender identification. The valid values are: • BTHD (Date of birth) • CUID (Customer identification (unspecified)) • NTID (National identification) • PASN (Passport number) • DRLN (Driver license) • TXIN (Tax identification) • CPNY (Company registration number) • PRXY (Proxy identification) • SSNB (Social security number) • ARNB (Alien registration number) • LAWE (Law enforcement identification) • MILI (Military identification) • TRVL (Travel identification (non-passport)) • EMAL (Email) • PHON (Phone number) 
   * @member {String} personalIdType
   */
  exports.prototype['personalIdType'] = undefined;
  /**
   * #### Visa Platform Connect This tag will denote whether the tax ID is a business or individual tax ID when personal ID Type contains the value of TXIN (Tax identification).  The valid values are: • B (Business) • I (Individual) 
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * #### Visa Platform Connect This tag will contain an acquirer-populated value associated with the API : senderInformation.personalIdType which will identify the personal ID type of the sender. 
   * @member {String} identificationNumber
   */
  exports.prototype['identificationNumber'] = undefined;



  return exports;
}));


