/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CardProcessingConfigFeaturesCardNotPresentInstallment', 'model/CardProcessingConfigFeaturesCardNotPresentProcessors'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CardProcessingConfigFeaturesCardNotPresentInstallment'), require('./CardProcessingConfigFeaturesCardNotPresentProcessors'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.CardProcessingConfigFeaturesCardNotPresent = factory(root.CyberSource.ApiClient, root.CyberSource.CardProcessingConfigFeaturesCardNotPresentInstallment, root.CyberSource.CardProcessingConfigFeaturesCardNotPresentProcessors);
  }
}(this, function(ApiClient, CardProcessingConfigFeaturesCardNotPresentInstallment, CardProcessingConfigFeaturesCardNotPresentProcessors) {
  'use strict';




  /**
   * The CardProcessingConfigFeaturesCardNotPresent model module.
   * @module model/CardProcessingConfigFeaturesCardNotPresent
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>CardProcessingConfigFeaturesCardNotPresent</code>.
   * @alias module:model/CardProcessingConfigFeaturesCardNotPresent
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>CardProcessingConfigFeaturesCardNotPresent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CardProcessingConfigFeaturesCardNotPresent} obj Optional instance to populate.
   * @return {module:model/CardProcessingConfigFeaturesCardNotPresent} The populated <code>CardProcessingConfigFeaturesCardNotPresent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('processors')) {
        obj['processors'] = ApiClient.convertToType(data['processors'], {'String': CardProcessingConfigFeaturesCardNotPresentProcessors});
      }
      if (data.hasOwnProperty('ignoreAddressVerificationSystem')) {
        obj['ignoreAddressVerificationSystem'] = ApiClient.convertToType(data['ignoreAddressVerificationSystem'], 'Boolean');
      }
      if (data.hasOwnProperty('visaStraightThroughProcessingOnly')) {
        obj['visaStraightThroughProcessingOnly'] = ApiClient.convertToType(data['visaStraightThroughProcessingOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('amexTransactionAdviceAddendum1')) {
        obj['amexTransactionAdviceAddendum1'] = ApiClient.convertToType(data['amexTransactionAdviceAddendum1'], 'String');
      }
      if (data.hasOwnProperty('installment')) {
        obj['installment'] = CardProcessingConfigFeaturesCardNotPresentInstallment.constructFromObject(data['installment']);
      }
    }
    return obj;
  }

  /**
   * e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &lt;your vpc processor&gt; 
   * @member {Object.<String, module:model/CardProcessingConfigFeaturesCardNotPresentProcessors>} processors
   */
  exports.prototype['processors'] = undefined;
  /**
   * Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline. Applicable for VPC, FDI Global (fdiglobal), GPX (gpx) and GPN (gpn) processors.
   * @member {Boolean} ignoreAddressVerificationSystem
   */
  exports.prototype['ignoreAddressVerificationSystem'] = undefined;
  /**
   * Indicates if a merchant is enabled for Straight Through Processing - B2B invoice payments. Applicable for FDI Global (fdiglobal), TSYS (tsys), VPC and GPX (gpx) processors.
   * @member {Boolean} visaStraightThroughProcessingOnly
   */
  exports.prototype['visaStraightThroughProcessingOnly'] = undefined;
  /**
   * Advice addendum field. It is used to display descriptive information about a transaction on customer's American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.
   * @member {String} amexTransactionAdviceAddendum1
   */
  exports.prototype['amexTransactionAdviceAddendum1'] = undefined;
  /**
   * @member {module:model/CardProcessingConfigFeaturesCardNotPresentInstallment} installment
   */
  exports.prototype['installment'] = undefined;



  return exports;
}));


