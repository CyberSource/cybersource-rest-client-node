/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails = factory(root.CyberSource.ApiClient, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription);
  }
}(this, function(ApiClient, UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription) {
  'use strict';




  /**
   * The UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails model module.
   * @module model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails</code>.
   * @alias module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
   * @class
   * @param interactionTypes {String} Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both
   * @param percentageSplitByF2F {Number} % Split
   * @param percentageSplitByCNP {Number} % Split
   * @param whenIsCustomerCharged {String} When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other
   * @param offerSubscriptions {Boolean} Does Merchant Offer Subscriptions?
   */
  var exports = function(interactionTypes, percentageSplitByF2F, percentageSplitByCNP, whenIsCustomerCharged, offerSubscriptions) {
    var _this = this;




    _this['interactionTypes'] = interactionTypes;
    _this['percentageSplitByF2F'] = percentageSplitByF2F;
    _this['percentageSplitByCNP'] = percentageSplitByCNP;
    _this['whenIsCustomerCharged'] = whenIsCustomerCharged;

    _this['offerSubscriptions'] = offerSubscriptions;

















  };

  /**
   * Constructs a <code>UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails} obj Optional instance to populate.
   * @return {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails} The populated <code>UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('customerType')) {
        obj['customerType'] = ApiClient.convertToType(data['customerType'], 'String');
      }
      if (data.hasOwnProperty('percentageSplitByB2B')) {
        obj['percentageSplitByB2B'] = ApiClient.convertToType(data['percentageSplitByB2B'], 'Number');
      }
      if (data.hasOwnProperty('percentageSplitByB2C')) {
        obj['percentageSplitByB2C'] = ApiClient.convertToType(data['percentageSplitByB2C'], 'Number');
      }
      if (data.hasOwnProperty('interactionTypes')) {
        obj['interactionTypes'] = ApiClient.convertToType(data['interactionTypes'], 'String');
      }
      if (data.hasOwnProperty('percentageSplitByF2F')) {
        obj['percentageSplitByF2F'] = ApiClient.convertToType(data['percentageSplitByF2F'], 'Number');
      }
      if (data.hasOwnProperty('percentageSplitByCNP')) {
        obj['percentageSplitByCNP'] = ApiClient.convertToType(data['percentageSplitByCNP'], 'Number');
      }
      if (data.hasOwnProperty('whenIsCustomerCharged')) {
        obj['whenIsCustomerCharged'] = ApiClient.convertToType(data['whenIsCustomerCharged'], 'String');
      }
      if (data.hasOwnProperty('whenIsCustomerChargedDescription')) {
        obj['whenIsCustomerChargedDescription'] = ApiClient.convertToType(data['whenIsCustomerChargedDescription'], 'String');
      }
      if (data.hasOwnProperty('offerSubscriptions')) {
        obj['offerSubscriptions'] = ApiClient.convertToType(data['offerSubscriptions'], 'Boolean');
      }
      if (data.hasOwnProperty('monthlySubscriptionPercent')) {
        obj['monthlySubscriptionPercent'] = ApiClient.convertToType(data['monthlySubscriptionPercent'], 'Number');
      }
      if (data.hasOwnProperty('quarterlySubscriptionPercent')) {
        obj['quarterlySubscriptionPercent'] = ApiClient.convertToType(data['quarterlySubscriptionPercent'], 'Number');
      }
      if (data.hasOwnProperty('semiannualSubscriptionPercent')) {
        obj['semiannualSubscriptionPercent'] = ApiClient.convertToType(data['semiannualSubscriptionPercent'], 'Number');
      }
      if (data.hasOwnProperty('annualSubscriptionPercent')) {
        obj['annualSubscriptionPercent'] = ApiClient.convertToType(data['annualSubscriptionPercent'], 'Number');
      }
      if (data.hasOwnProperty('currencyType')) {
        obj['currencyType'] = ApiClient.convertToType(data['currencyType'], 'String');
      }
      if (data.hasOwnProperty('estimatedMonthlySales')) {
        obj['estimatedMonthlySales'] = ApiClient.convertToType(data['estimatedMonthlySales'], 'Number');
      }
      if (data.hasOwnProperty('averageOrderAmount')) {
        obj['averageOrderAmount'] = ApiClient.convertToType(data['averageOrderAmount'], 'Number');
      }
      if (data.hasOwnProperty('largestExpectedOrderAmount')) {
        obj['largestExpectedOrderAmount'] = ApiClient.convertToType(data['largestExpectedOrderAmount'], 'Number');
      }
      if (data.hasOwnProperty('primaryAccountUsage')) {
        obj['primaryAccountUsage'] = ApiClient.convertToType(data['primaryAccountUsage'], 'String');
      }
      if (data.hasOwnProperty('sourceOfFunds')) {
        obj['sourceOfFunds'] = ApiClient.convertToType(data['sourceOfFunds'], 'String');
      }
      if (data.hasOwnProperty('receiveMoney3rdParties')) {
        obj['receiveMoney3rdParties'] = ApiClient.convertToType(data['receiveMoney3rdParties'], 'Boolean');
      }
      if (data.hasOwnProperty('receiveTransactionFrequency')) {
        obj['receiveTransactionFrequency'] = ApiClient.convertToType(data['receiveTransactionFrequency'], 'String');
      }
      if (data.hasOwnProperty('estimatedMonthlySpend')) {
        obj['estimatedMonthlySpend'] = ApiClient.convertToType(data['estimatedMonthlySpend'], 'String');
      }
      if (data.hasOwnProperty('countryTransactions')) {
        obj['countryTransactions'] = ApiClient.convertToType(data['countryTransactions'], ['String']);
      }
      if (data.hasOwnProperty('currenciesIn')) {
        obj['currenciesIn'] = ApiClient.convertToType(data['currenciesIn'], ['String']);
      }
      if (data.hasOwnProperty('currenciesOut')) {
        obj['currenciesOut'] = ApiClient.convertToType(data['currenciesOut'], ['String']);
      }
      if (data.hasOwnProperty('productServicesSubscription')) {
        obj['productServicesSubscription'] = ApiClient.convertToType(data['productServicesSubscription'], [UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription]);
      }
    }
    return obj;
  }

  /**
   * Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both
   * @member {String} customerType
   */
  exports.prototype['customerType'] = undefined;
  /**
   * % Split
   * @member {Number} percentageSplitByB2B
   */
  exports.prototype['percentageSplitByB2B'] = undefined;
  /**
   * % Split
   * @member {Number} percentageSplitByB2C
   */
  exports.prototype['percentageSplitByB2C'] = undefined;
  /**
   * Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both
   * @member {String} interactionTypes
   */
  exports.prototype['interactionTypes'] = undefined;
  /**
   * % Split
   * @member {Number} percentageSplitByF2F
   */
  exports.prototype['percentageSplitByF2F'] = undefined;
  /**
   * % Split
   * @member {Number} percentageSplitByCNP
   */
  exports.prototype['percentageSplitByCNP'] = undefined;
  /**
   * When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other
   * @member {String} whenIsCustomerCharged
   */
  exports.prototype['whenIsCustomerCharged'] = undefined;
  /**
   * @member {String} whenIsCustomerChargedDescription
   */
  exports.prototype['whenIsCustomerChargedDescription'] = undefined;
  /**
   * Does Merchant Offer Subscriptions?
   * @member {Boolean} offerSubscriptions
   */
  exports.prototype['offerSubscriptions'] = undefined;
  /**
   * % of business is monthly subscriptions
   * @member {Number} monthlySubscriptionPercent
   */
  exports.prototype['monthlySubscriptionPercent'] = undefined;
  /**
   * % of business is quarterly subscriptions
   * @member {Number} quarterlySubscriptionPercent
   */
  exports.prototype['quarterlySubscriptionPercent'] = undefined;
  /**
   * % of business is semi-annual subscriptions
   * @member {Number} semiannualSubscriptionPercent
   */
  exports.prototype['semiannualSubscriptionPercent'] = undefined;
  /**
   * % of business is annual subscriptions
   * @member {Number} annualSubscriptionPercent
   */
  exports.prototype['annualSubscriptionPercent'] = undefined;
  /**
   * Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF
   * @member {String} currencyType
   */
  exports.prototype['currencyType'] = undefined;
  /**
   * Merchant's estimated monthly sales
   * @member {Number} estimatedMonthlySales
   */
  exports.prototype['estimatedMonthlySales'] = undefined;
  /**
   * Merchant's average order amount
   * @member {Number} averageOrderAmount
   */
  exports.prototype['averageOrderAmount'] = undefined;
  /**
   * Merchant's largest expected order amount
   * @member {Number} largestExpectedOrderAmount
   */
  exports.prototype['largestExpectedOrderAmount'] = undefined;
  /**
   * Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other
   * @member {String} primaryAccountUsage
   */
  exports.prototype['primaryAccountUsage'] = undefined;
  /**
   * Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other
   * @member {String} sourceOfFunds
   */
  exports.prototype['sourceOfFunds'] = undefined;
  /**
   * Will you recieve money from 3rd parties into your account?
   * @member {Boolean} receiveMoney3rdParties
   */
  exports.prototype['receiveMoney3rdParties'] = undefined;
  /**
   * Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month
   * @member {String} receiveTransactionFrequency
   */
  exports.prototype['receiveTransactionFrequency'] = undefined;
  /**
   * What is your estimated total monthly spend?  Possible values: - <$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+
   * @member {String} estimatedMonthlySpend
   */
  exports.prototype['estimatedMonthlySpend'] = undefined;
  /**
   * @member {Array.<String>} countryTransactions
   */
  exports.prototype['countryTransactions'] = undefined;
  /**
   * @member {Array.<String>} currenciesIn
   */
  exports.prototype['currenciesIn'] = undefined;
  /**
   * @member {Array.<String>} currenciesOut
   */
  exports.prototype['currenciesOut'] = undefined;
  /**
   * @member {Array.<module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription>} productServicesSubscription
   */
  exports.prototype['productServicesSubscription'] = undefined;



  return exports;
}));


