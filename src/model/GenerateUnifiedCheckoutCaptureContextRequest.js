/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Upv1capturecontextsCaptureMandate', 'model/Upv1capturecontextsCheckoutApiInitialization', 'model/Upv1capturecontextsOrderInformation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Upv1capturecontextsCaptureMandate'), require('./Upv1capturecontextsCheckoutApiInitialization'), require('./Upv1capturecontextsOrderInformation'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.GenerateUnifiedCheckoutCaptureContextRequest = factory(root.CyberSource.ApiClient, root.CyberSource.Upv1capturecontextsCaptureMandate, root.CyberSource.Upv1capturecontextsCheckoutApiInitialization, root.CyberSource.Upv1capturecontextsOrderInformation);
  }
}(this, function(ApiClient, Upv1capturecontextsCaptureMandate, Upv1capturecontextsCheckoutApiInitialization, Upv1capturecontextsOrderInformation) {
  'use strict';




  /**
   * The GenerateUnifiedCheckoutCaptureContextRequest model module.
   * @module model/GenerateUnifiedCheckoutCaptureContextRequest
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>GenerateUnifiedCheckoutCaptureContextRequest</code>.
   * @alias module:model/GenerateUnifiedCheckoutCaptureContextRequest
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>GenerateUnifiedCheckoutCaptureContextRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GenerateUnifiedCheckoutCaptureContextRequest} obj Optional instance to populate.
   * @return {module:model/GenerateUnifiedCheckoutCaptureContextRequest} The populated <code>GenerateUnifiedCheckoutCaptureContextRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('clientVersion')) {
        obj['clientVersion'] = ApiClient.convertToType(data['clientVersion'], 'String');
      }
      if (data.hasOwnProperty('targetOrigins')) {
        obj['targetOrigins'] = ApiClient.convertToType(data['targetOrigins'], ['String']);
      }
      if (data.hasOwnProperty('allowedCardNetworks')) {
        obj['allowedCardNetworks'] = ApiClient.convertToType(data['allowedCardNetworks'], ['String']);
      }
      if (data.hasOwnProperty('allowedPaymentTypes')) {
        obj['allowedPaymentTypes'] = ApiClient.convertToType(data['allowedPaymentTypes'], ['String']);
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('locale')) {
        obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
      }
      if (data.hasOwnProperty('captureMandate')) {
        obj['captureMandate'] = Upv1capturecontextsCaptureMandate.constructFromObject(data['captureMandate']);
      }
      if (data.hasOwnProperty('orderInformation')) {
        obj['orderInformation'] = Upv1capturecontextsOrderInformation.constructFromObject(data['orderInformation']);
      }
      if (data.hasOwnProperty('checkoutApiInitialization')) {
        obj['checkoutApiInitialization'] = Upv1capturecontextsCheckoutApiInitialization.constructFromObject(data['checkoutApiInitialization']);
      }
    }
    return obj;
  }

  /**
   * Specify the version of Unified Checkout that you want to use.
   * @member {String} clientVersion
   */
  exports.prototype['clientVersion'] = undefined;
  /**
   * The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Unified Checkout is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080<br><br>  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \"https://example.com\",     \"https://basket.example.com\",     \"https://ecom.example.com\"   ] 
   * @member {Array.<String>} targetOrigins
   */
  exports.prototype['targetOrigins'] = undefined;
  /**
   * The list of card networks you want to use for this Unified Checkout transaction.  Unified Checkout currently supports the following card networks:     - VISA     - MASTERCARD     - AMEX     - CARNET     - CARTESBANCAIRES     - CUP     - DINERSCLUB     - DISCOVER     - EFTPOS     - ELO     - JCB     - JCREW     - MADA     - MAESTRO     - MEEZA 
   * @member {Array.<String>} allowedCardNetworks
   */
  exports.prototype['allowedCardNetworks'] = undefined;
  /**
   * The payment types that are allowed for the merchant.    Possible values when launching Unified Checkout:   - PANENTRY                 - GOOGLEPAY   - SRC   - CHECK <br><br>  Possible values when launching Unified Checkout with Checkout API: - PANENTRY               - SRC <br><br>  Possible values when launching Click To Pay Drop-In UI: - CLICKTOPAY <br><br>  **Important:**    - SRC and CLICKTOPAY are only available for Visa, Mastercard and AMEX. 
   * @member {Array.<String>} allowedPaymentTypes
   */
  exports.prototype['allowedPaymentTypes'] = undefined;
  /**
   * Country the purchase is originating from (e.g. country of the merchant).  Use the two-character ISO Standard 
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Localization of the User experience conforming to the ISO 639-1 language standards and two-character ISO Standard Country Code.  Please refer to list of [supported locales through Unified Checkout](https://developer.cybersource.com/docs/cybs/en-us/unified-checkout/developer/all/rest/unified-checkout/uc-appendix-languages.html) 
   * @member {String} locale
   */
  exports.prototype['locale'] = undefined;
  /**
   * @member {module:model/Upv1capturecontextsCaptureMandate} captureMandate
   */
  exports.prototype['captureMandate'] = undefined;
  /**
   * @member {module:model/Upv1capturecontextsOrderInformation} orderInformation
   */
  exports.prototype['orderInformation'] = undefined;
  /**
   * @member {module:model/Upv1capturecontextsCheckoutApiInitialization} checkoutApiInitialization
   */
  exports.prototype['checkoutApiInitialization'] = undefined;



  return exports;
}));


