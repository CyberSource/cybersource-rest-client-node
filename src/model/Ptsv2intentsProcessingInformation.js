/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ptsv2intentsProcessingInformationAuthorizationOptions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Ptsv2intentsProcessingInformationAuthorizationOptions'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2intentsProcessingInformation = factory(root.CyberSource.ApiClient, root.CyberSource.Ptsv2intentsProcessingInformationAuthorizationOptions);
  }
}(this, function(ApiClient, Ptsv2intentsProcessingInformationAuthorizationOptions) {
  'use strict';




  /**
   * The Ptsv2intentsProcessingInformation model module.
   * @module model/Ptsv2intentsProcessingInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2intentsProcessingInformation</code>.
   * @alias module:model/Ptsv2intentsProcessingInformation
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Ptsv2intentsProcessingInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2intentsProcessingInformation} obj Optional instance to populate.
   * @return {module:model/Ptsv2intentsProcessingInformation} The populated <code>Ptsv2intentsProcessingInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('processingInstruction')) {
        obj['processingInstruction'] = ApiClient.convertToType(data['processingInstruction'], 'String');
      }
      if (data.hasOwnProperty('authorizationOptions')) {
        obj['authorizationOptions'] = Ptsv2intentsProcessingInformationAuthorizationOptions.constructFromObject(data['authorizationOptions']);
      }
      if (data.hasOwnProperty('actionList')) {
        obj['actionList'] = ApiClient.convertToType(data['actionList'], ['String']);
      }
      if (data.hasOwnProperty('highRiskTransactionFlag')) {
        obj['highRiskTransactionFlag'] = ApiClient.convertToType(data['highRiskTransactionFlag'], 'String');
      }
      if (data.hasOwnProperty('transactionRetry')) {
        obj['transactionRetry'] = ApiClient.convertToType(data['transactionRetry'], 'String');
      }
      if (data.hasOwnProperty('lastOneHrTransactionCount')) {
        obj['lastOneHrTransactionCount'] = ApiClient.convertToType(data['lastOneHrTransactionCount'], 'String');
      }
      if (data.hasOwnProperty('lastOneDayTransactionCount')) {
        obj['lastOneDayTransactionCount'] = ApiClient.convertToType(data['lastOneDayTransactionCount'], 'String');
      }
      if (data.hasOwnProperty('lastThreeMonthsTxnCount')) {
        obj['lastThreeMonthsTxnCount'] = ApiClient.convertToType(data['lastThreeMonthsTxnCount'], 'String');
      }
      if (data.hasOwnProperty('totalTransactionCount')) {
        obj['totalTransactionCount'] = ApiClient.convertToType(data['totalTransactionCount'], 'String');
      }
      if (data.hasOwnProperty('pinVerification')) {
        obj['pinVerification'] = ApiClient.convertToType(data['pinVerification'], 'String');
      }
      if (data.hasOwnProperty('faceIdVerification')) {
        obj['faceIdVerification'] = ApiClient.convertToType(data['faceIdVerification'], 'String');
      }
      if (data.hasOwnProperty('userPassedVerification')) {
        obj['userPassedVerification'] = ApiClient.convertToType(data['userPassedVerification'], 'String');
      }
      if (data.hasOwnProperty('ipAddress')) {
        obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
      }
      if (data.hasOwnProperty('transactionDate')) {
        obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'String');
      }
      if (data.hasOwnProperty('tangible')) {
        obj['tangible'] = ApiClient.convertToType(data['tangible'], 'String');
      }
    }
    return obj;
  }

  /**
   * The instruction to process an order. - default value: 'NO_INSTRUCTION' - 'ORDER_SAVED_EXPLICITLY' 
   * @member {String} processingInstruction
   */
  exports.prototype['processingInstruction'] = undefined;
  /**
   * @member {module:model/Ptsv2intentsProcessingInformationAuthorizationOptions} authorizationOptions
   */
  exports.prototype['authorizationOptions'] = undefined;
  /**
   * Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - `AP_ORDER`: Use this when Alternative Payment Order service is requested. 
   * @member {Array.<String>} actionList
   */
  exports.prototype['actionList'] = undefined;
  /**
   * Indicates if the transaction is flagged as high risk. 
   * @member {String} highRiskTransactionFlag
   */
  exports.prototype['highRiskTransactionFlag'] = undefined;
  /**
   * Indicates if the transaction is a retry. 
   * @member {String} transactionRetry
   */
  exports.prototype['transactionRetry'] = undefined;
  /**
   * The number of transactions in the last one hour. 
   * @member {String} lastOneHrTransactionCount
   */
  exports.prototype['lastOneHrTransactionCount'] = undefined;
  /**
   * The number of transactions in the last one day. 
   * @member {String} lastOneDayTransactionCount
   */
  exports.prototype['lastOneDayTransactionCount'] = undefined;
  /**
   * The number of transactions in the last three months. 
   * @member {String} lastThreeMonthsTxnCount
   */
  exports.prototype['lastThreeMonthsTxnCount'] = undefined;
  /**
   * The total number of transactions. 
   * @member {String} totalTransactionCount
   */
  exports.prototype['totalTransactionCount'] = undefined;
  /**
   * Indicates if PIN verification is required. 
   * @member {String} pinVerification
   */
  exports.prototype['pinVerification'] = undefined;
  /**
   * Indicates if face ID verification is required. 
   * @member {String} faceIdVerification
   */
  exports.prototype['faceIdVerification'] = undefined;
  /**
   * Indicates if the user passed verification. 
   * @member {String} userPassedVerification
   */
  exports.prototype['userPassedVerification'] = undefined;
  /**
   * The IP address of the user. 
   * @member {String} ipAddress
   */
  exports.prototype['ipAddress'] = undefined;
  /**
   * The date of the transaction. 
   * @member {String} transactionDate
   */
  exports.prototype['transactionDate'] = undefined;
  /**
   * Indicates if the transaction involves tangible goods. 
   * @member {String} tangible
   */
  exports.prototype['tangible'] = undefined;



  return exports;
}));


