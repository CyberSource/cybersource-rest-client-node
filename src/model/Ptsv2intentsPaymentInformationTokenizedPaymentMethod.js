/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.Ptsv2intentsPaymentInformationTokenizedPaymentMethod = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Ptsv2intentsPaymentInformationTokenizedPaymentMethod model module.
   * @module model/Ptsv2intentsPaymentInformationTokenizedPaymentMethod
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Ptsv2intentsPaymentInformationTokenizedPaymentMethod</code>.
   * @alias module:model/Ptsv2intentsPaymentInformationTokenizedPaymentMethod
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>Ptsv2intentsPaymentInformationTokenizedPaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ptsv2intentsPaymentInformationTokenizedPaymentMethod} obj Optional instance to populate.
   * @return {module:model/Ptsv2intentsPaymentInformationTokenizedPaymentMethod} The populated <code>Ptsv2intentsPaymentInformationTokenizedPaymentMethod</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('usagePattern')) {
        obj['usagePattern'] = ApiClient.convertToType(data['usagePattern'], 'String');
      }
      if (data.hasOwnProperty('usageType')) {
        obj['usageType'] = ApiClient.convertToType(data['usageType'], 'String');
      }
      if (data.hasOwnProperty('allowMultipleTokens')) {
        obj['allowMultipleTokens'] = ApiClient.convertToType(data['allowMultipleTokens'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Description of the vaulted payment method shown to the buyer during checkout and in their PayPal account. 
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Indicates how the merchant will primarily use the vaulted payment method. Valid values: - \"IMMEDIATE\": For on-demand, instant payments. These payments are variable in both amount and frequency and will be used to pay for goods or services before they are rendered to the buyer - \"DEFERRED\": For post-pay payments; that is, payments for goods or services that have already been rendered to the buyer - \"RECURRING_PREPAID\": For recurring payments before services are rendered. - \"RECURRING_POSTPAID\": For recurring payments after services are rendered. - \"THRESHOLD_PREPAID\": For payments when a pre-defined threshold is reached before services are rendered. - \"THRESHOLD_POSTPAID\": For payments when a pre-defined threshold is reached after services are rendered. 
   * @member {String} usagePattern
   */
  exports.prototype['usagePattern'] = undefined;
  /**
   * Indicates the type of vaulting relationship. Valid values: - \"MERCHANT\": Single merchant relationship. - \"PLATFORM\": Platform hosting multiple merchants. 
   * @member {String} usageType
   */
  exports.prototype['usageType'] = undefined;
  /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. This helps to identify customers distinctly even though they may share the same PayPal account. 
   * @member {Boolean} allowMultipleTokens
   */
  exports.prototype['allowMultipleTokens'] = undefined;



  return exports;
}));


