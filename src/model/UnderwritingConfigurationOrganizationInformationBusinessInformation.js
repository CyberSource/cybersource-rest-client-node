/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationAddress', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation', 'model/UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationAddress'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation'), require('./UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformation = factory(root.CyberSource.ApiClient, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationAddress, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation, root.CyberSource.UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress);
  }
}(this, function(ApiClient, UnderwritingConfigurationOrganizationInformationBusinessInformationAddress, UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact, UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails, UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation, UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation, UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress) {
  'use strict';




  /**
   * The UnderwritingConfigurationOrganizationInformationBusinessInformation model module.
   * @module model/UnderwritingConfigurationOrganizationInformationBusinessInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>UnderwritingConfigurationOrganizationInformationBusinessInformation</code>.
   * @alias module:model/UnderwritingConfigurationOrganizationInformationBusinessInformation
   * @class
   * @param businessIdentifier {String} Tax ID for the business
   * @param countryRegistration {String} Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.
   * @param legalName {String} The legally registered name of the business
   * @param doingBusinessAs {String} The DBA of the business.
   * @param businessDescription {String} Short description of the Business
   * @param startDate {Date} When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
   * @param merchantCategoryCode {String} Industry standard Merchant Category Code (MCC)
   * @param businessType {String} Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST
   * @param countryPhoneNumber {String} Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.
   * @param phoneNumber {String} Business Phone Number
   * @param email {String} Business Email Address
   */
  var exports = function(businessIdentifier, countryRegistration, legalName, doingBusinessAs, businessDescription, startDate, merchantCategoryCode, businessType, countryPhoneNumber, phoneNumber, email) {
    var _this = this;

    _this['businessIdentifier'] = businessIdentifier;
    _this['countryRegistration'] = countryRegistration;
    _this['legalName'] = legalName;
    _this['doingBusinessAs'] = doingBusinessAs;
    _this['businessDescription'] = businessDescription;



    _this['startDate'] = startDate;
    _this['merchantCategoryCode'] = merchantCategoryCode;


    _this['businessType'] = businessType;

    _this['countryPhoneNumber'] = countryPhoneNumber;
    _this['phoneNumber'] = phoneNumber;
    _this['email'] = email;







  };

  /**
   * Constructs a <code>UnderwritingConfigurationOrganizationInformationBusinessInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformation} obj Optional instance to populate.
   * @return {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformation} The populated <code>UnderwritingConfigurationOrganizationInformationBusinessInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('businessIdentifier')) {
        obj['businessIdentifier'] = ApiClient.convertToType(data['businessIdentifier'], 'String');
      }
      if (data.hasOwnProperty('countryRegistration')) {
        obj['countryRegistration'] = ApiClient.convertToType(data['countryRegistration'], 'String');
      }
      if (data.hasOwnProperty('legalName')) {
        obj['legalName'] = ApiClient.convertToType(data['legalName'], 'String');
      }
      if (data.hasOwnProperty('doingBusinessAs')) {
        obj['doingBusinessAs'] = ApiClient.convertToType(data['doingBusinessAs'], 'String');
      }
      if (data.hasOwnProperty('businessDescription')) {
        obj['businessDescription'] = ApiClient.convertToType(data['businessDescription'], 'String');
      }
      if (data.hasOwnProperty('registrationNumber')) {
        obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
      }
      if (data.hasOwnProperty('stockExchange')) {
        obj['stockExchange'] = ApiClient.convertToType(data['stockExchange'], 'String');
      }
      if (data.hasOwnProperty('tickerSymbol')) {
        obj['tickerSymbol'] = ApiClient.convertToType(data['tickerSymbol'], 'String');
      }
      if (data.hasOwnProperty('startDate')) {
        obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
      }
      if (data.hasOwnProperty('merchantCategoryCode')) {
        obj['merchantCategoryCode'] = ApiClient.convertToType(data['merchantCategoryCode'], 'String');
      }
      if (data.hasOwnProperty('mccDescription')) {
        obj['mccDescription'] = ApiClient.convertToType(data['mccDescription'], 'String');
      }
      if (data.hasOwnProperty('websiteURL')) {
        obj['websiteURL'] = ApiClient.convertToType(data['websiteURL'], 'String');
      }
      if (data.hasOwnProperty('businessType')) {
        obj['businessType'] = ApiClient.convertToType(data['businessType'], 'String');
      }
      if (data.hasOwnProperty('localMCC')) {
        obj['localMCC'] = ApiClient.convertToType(data['localMCC'], ['String']);
      }
      if (data.hasOwnProperty('countryPhoneNumber')) {
        obj['countryPhoneNumber'] = ApiClient.convertToType(data['countryPhoneNumber'], 'String');
      }
      if (data.hasOwnProperty('phoneNumber')) {
        obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('whatYourCompanyDoes')) {
        obj['whatYourCompanyDoes'] = ApiClient.convertToType(data['whatYourCompanyDoes'], 'String');
      }
      if (data.hasOwnProperty('address')) {
        obj['address'] = UnderwritingConfigurationOrganizationInformationBusinessInformationAddress.constructFromObject(data['address']);
      }
      if (data.hasOwnProperty('tradingAddress')) {
        obj['tradingAddress'] = UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress.constructFromObject(data['tradingAddress']);
      }
      if (data.hasOwnProperty('businessContact')) {
        obj['businessContact'] = UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact.constructFromObject(data['businessContact']);
      }
      if (data.hasOwnProperty('businessDetails')) {
        obj['businessDetails'] = UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.constructFromObject(data['businessDetails']);
      }
      if (data.hasOwnProperty('ownerInformation')) {
        obj['ownerInformation'] = ApiClient.convertToType(data['ownerInformation'], [UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation]);
      }
      if (data.hasOwnProperty('directorInformation')) {
        obj['directorInformation'] = ApiClient.convertToType(data['directorInformation'], [UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation]);
      }
    }
    return obj;
  }

  /**
   * Tax ID for the business
   * @member {String} businessIdentifier
   */
  exports.prototype['businessIdentifier'] = undefined;
  /**
   * Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.
   * @member {String} countryRegistration
   */
  exports.prototype['countryRegistration'] = undefined;
  /**
   * The legally registered name of the business
   * @member {String} legalName
   */
  exports.prototype['legalName'] = undefined;
  /**
   * The DBA of the business.
   * @member {String} doingBusinessAs
   */
  exports.prototype['doingBusinessAs'] = undefined;
  /**
   * Short description of the Business
   * @member {String} businessDescription
   */
  exports.prototype['businessDescription'] = undefined;
  /**
   * Registration ID for Enterprise Merchant
   * @member {String} registrationNumber
   */
  exports.prototype['registrationNumber'] = undefined;
  /**
   * Which stock exchange is the company trading in?
   * @member {String} stockExchange
   */
  exports.prototype['stockExchange'] = undefined;
  /**
   * Stock Symbol on the exchange
   * @member {String} tickerSymbol
   */
  exports.prototype['tickerSymbol'] = undefined;
  /**
   * When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
   * @member {Date} startDate
   */
  exports.prototype['startDate'] = undefined;
  /**
   * Industry standard Merchant Category Code (MCC)
   * @member {String} merchantCategoryCode
   */
  exports.prototype['merchantCategoryCode'] = undefined;
  /**
   * MCC Description
   * @member {String} mccDescription
   */
  exports.prototype['mccDescription'] = undefined;
  /**
   * Website for the Business
   * @member {String} websiteURL
   */
  exports.prototype['websiteURL'] = undefined;
  /**
   * Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST
   * @member {String} businessType
   */
  exports.prototype['businessType'] = undefined;
  /**
   * @member {Array.<String>} localMCC
   */
  exports.prototype['localMCC'] = undefined;
  /**
   * Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.
   * @member {String} countryPhoneNumber
   */
  exports.prototype['countryPhoneNumber'] = undefined;
  /**
   * Business Phone Number
   * @member {String} phoneNumber
   */
  exports.prototype['phoneNumber'] = undefined;
  /**
   * Business Email Address
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * What your company does and how you market your service
   * @member {String} whatYourCompanyDoes
   */
  exports.prototype['whatYourCompanyDoes'] = undefined;
  /**
   * @member {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationAddress} address
   */
  exports.prototype['address'] = undefined;
  /**
   * @member {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress} tradingAddress
   */
  exports.prototype['tradingAddress'] = undefined;
  /**
   * @member {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact} businessContact
   */
  exports.prototype['businessContact'] = undefined;
  /**
   * @member {module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails} businessDetails
   */
  exports.prototype['businessDetails'] = undefined;
  /**
   * @member {Array.<module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation>} ownerInformation
   */
  exports.prototype['ownerInformation'] = undefined;
  /**
   * @member {Array.<module:model/UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation>} directorInformation
   */
  exports.prototype['directorInformation'] = undefined;



  return exports;
}));


